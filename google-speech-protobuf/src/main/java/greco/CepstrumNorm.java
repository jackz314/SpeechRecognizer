// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speech/greco3/frontend/cepstrum_norm.proto

package greco;

public final class CepstrumNorm {
  private CepstrumNorm() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
    registry.add(greco.CepstrumNorm.CepstrumNormParams.id);
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface CepstrumNormParamsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:greco.CepstrumNormParams)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional int32 input_size = 1 [default = 13];</code>
     * @return Whether the inputSize field is set.
     */
    boolean hasInputSize();
    /**
     * <code>optional int32 input_size = 1 [default = 13];</code>
     * @return The inputSize.
     */
    int getInputSize();

    /**
     * <code>optional int32 energy_index = 2 [default = 13];</code>
     * @return Whether the energyIndex field is set.
     */
    boolean hasEnergyIndex();
    /**
     * <code>optional int32 energy_index = 2 [default = 13];</code>
     * @return The energyIndex.
     */
    int getEnergyIndex();

    /**
     * <code>optional float var_norm_floor = 3 [default = 1];</code>
     * @return Whether the varNormFloor field is set.
     */
    boolean hasVarNormFloor();
    /**
     * <code>optional float var_norm_floor = 3 [default = 1];</code>
     * @return The varNormFloor.
     */
    float getVarNormFloor();

    /**
     * <code>optional float silence_floor = 4 [default = 50];</code>
     * @return Whether the silenceFloor field is set.
     */
    boolean hasSilenceFloor();
    /**
     * <code>optional float silence_floor = 4 [default = 50];</code>
     * @return The silenceFloor.
     */
    float getSilenceFloor();

    /**
     * <code>optional float energy_scale = 5 [default = 0.1];</code>
     * @return Whether the energyScale field is set.
     */
    boolean hasEnergyScale();
    /**
     * <code>optional float energy_scale = 5 [default = 0.1];</code>
     * @return The energyScale.
     */
    float getEnergyScale();

    /**
     * <code>optional bool use_endpointer = 6 [default = false];</code>
     * @return Whether the useEndpointer field is set.
     */
    boolean hasUseEndpointer();
    /**
     * <code>optional bool use_endpointer = 6 [default = false];</code>
     * @return The useEndpointer.
     */
    boolean getUseEndpointer();

    /**
     * <code>optional bool normalize_cluster = 7 [default = false];</code>
     * @return Whether the normalizeCluster field is set.
     */
    boolean hasNormalizeCluster();
    /**
     * <code>optional bool normalize_cluster = 7 [default = false];</code>
     * @return The normalizeCluster.
     */
    boolean getNormalizeCluster();

    /**
     * <code>optional bool normalize_mean = 8 [default = true];</code>
     * @return Whether the normalizeMean field is set.
     */
    boolean hasNormalizeMean();
    /**
     * <code>optional bool normalize_mean = 8 [default = true];</code>
     * @return The normalizeMean.
     */
    boolean getNormalizeMean();

    /**
     * <code>optional bool normalize_variance = 9 [default = true];</code>
     * @return Whether the normalizeVariance field is set.
     */
    boolean hasNormalizeVariance();
    /**
     * <code>optional bool normalize_variance = 9 [default = true];</code>
     * @return The normalizeVariance.
     */
    boolean getNormalizeVariance();

    /**
     * <code>optional bool normalize_energy = 10 [default = false];</code>
     * @return Whether the normalizeEnergy field is set.
     */
    boolean hasNormalizeEnergy();
    /**
     * <code>optional bool normalize_energy = 10 [default = false];</code>
     * @return The normalizeEnergy.
     */
    boolean getNormalizeEnergy();
  }
  /**
   * Protobuf type {@code greco.CepstrumNormParams}
   */
  public static final class CepstrumNormParams extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:greco.CepstrumNormParams)
      CepstrumNormParamsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CepstrumNormParams.newBuilder() to construct.
    private CepstrumNormParams(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CepstrumNormParams() {
      inputSize_ = 13;
      energyIndex_ = 13;
      varNormFloor_ = 1F;
      silenceFloor_ = 50F;
      energyScale_ = 0.1F;
      normalizeMean_ = true;
      normalizeVariance_ = true;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new CepstrumNormParams();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return greco.CepstrumNorm.internal_static_greco_CepstrumNormParams_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return greco.CepstrumNorm.internal_static_greco_CepstrumNormParams_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              greco.CepstrumNorm.CepstrumNormParams.class, greco.CepstrumNorm.CepstrumNormParams.Builder.class);
    }

    private int bitField0_;
    public static final int INPUT_SIZE_FIELD_NUMBER = 1;
    private int inputSize_;
    /**
     * <code>optional int32 input_size = 1 [default = 13];</code>
     * @return Whether the inputSize field is set.
     */
    @java.lang.Override
    public boolean hasInputSize() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional int32 input_size = 1 [default = 13];</code>
     * @return The inputSize.
     */
    @java.lang.Override
    public int getInputSize() {
      return inputSize_;
    }

    public static final int ENERGY_INDEX_FIELD_NUMBER = 2;
    private int energyIndex_;
    /**
     * <code>optional int32 energy_index = 2 [default = 13];</code>
     * @return Whether the energyIndex field is set.
     */
    @java.lang.Override
    public boolean hasEnergyIndex() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>optional int32 energy_index = 2 [default = 13];</code>
     * @return The energyIndex.
     */
    @java.lang.Override
    public int getEnergyIndex() {
      return energyIndex_;
    }

    public static final int VAR_NORM_FLOOR_FIELD_NUMBER = 3;
    private float varNormFloor_;
    /**
     * <code>optional float var_norm_floor = 3 [default = 1];</code>
     * @return Whether the varNormFloor field is set.
     */
    @java.lang.Override
    public boolean hasVarNormFloor() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>optional float var_norm_floor = 3 [default = 1];</code>
     * @return The varNormFloor.
     */
    @java.lang.Override
    public float getVarNormFloor() {
      return varNormFloor_;
    }

    public static final int SILENCE_FLOOR_FIELD_NUMBER = 4;
    private float silenceFloor_;
    /**
     * <code>optional float silence_floor = 4 [default = 50];</code>
     * @return Whether the silenceFloor field is set.
     */
    @java.lang.Override
    public boolean hasSilenceFloor() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>optional float silence_floor = 4 [default = 50];</code>
     * @return The silenceFloor.
     */
    @java.lang.Override
    public float getSilenceFloor() {
      return silenceFloor_;
    }

    public static final int ENERGY_SCALE_FIELD_NUMBER = 5;
    private float energyScale_;
    /**
     * <code>optional float energy_scale = 5 [default = 0.1];</code>
     * @return Whether the energyScale field is set.
     */
    @java.lang.Override
    public boolean hasEnergyScale() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <code>optional float energy_scale = 5 [default = 0.1];</code>
     * @return The energyScale.
     */
    @java.lang.Override
    public float getEnergyScale() {
      return energyScale_;
    }

    public static final int USE_ENDPOINTER_FIELD_NUMBER = 6;
    private boolean useEndpointer_;
    /**
     * <code>optional bool use_endpointer = 6 [default = false];</code>
     * @return Whether the useEndpointer field is set.
     */
    @java.lang.Override
    public boolean hasUseEndpointer() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <code>optional bool use_endpointer = 6 [default = false];</code>
     * @return The useEndpointer.
     */
    @java.lang.Override
    public boolean getUseEndpointer() {
      return useEndpointer_;
    }

    public static final int NORMALIZE_CLUSTER_FIELD_NUMBER = 7;
    private boolean normalizeCluster_;
    /**
     * <code>optional bool normalize_cluster = 7 [default = false];</code>
     * @return Whether the normalizeCluster field is set.
     */
    @java.lang.Override
    public boolean hasNormalizeCluster() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <code>optional bool normalize_cluster = 7 [default = false];</code>
     * @return The normalizeCluster.
     */
    @java.lang.Override
    public boolean getNormalizeCluster() {
      return normalizeCluster_;
    }

    public static final int NORMALIZE_MEAN_FIELD_NUMBER = 8;
    private boolean normalizeMean_;
    /**
     * <code>optional bool normalize_mean = 8 [default = true];</code>
     * @return Whether the normalizeMean field is set.
     */
    @java.lang.Override
    public boolean hasNormalizeMean() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <code>optional bool normalize_mean = 8 [default = true];</code>
     * @return The normalizeMean.
     */
    @java.lang.Override
    public boolean getNormalizeMean() {
      return normalizeMean_;
    }

    public static final int NORMALIZE_VARIANCE_FIELD_NUMBER = 9;
    private boolean normalizeVariance_;
    /**
     * <code>optional bool normalize_variance = 9 [default = true];</code>
     * @return Whether the normalizeVariance field is set.
     */
    @java.lang.Override
    public boolean hasNormalizeVariance() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <code>optional bool normalize_variance = 9 [default = true];</code>
     * @return The normalizeVariance.
     */
    @java.lang.Override
    public boolean getNormalizeVariance() {
      return normalizeVariance_;
    }

    public static final int NORMALIZE_ENERGY_FIELD_NUMBER = 10;
    private boolean normalizeEnergy_;
    /**
     * <code>optional bool normalize_energy = 10 [default = false];</code>
     * @return Whether the normalizeEnergy field is set.
     */
    @java.lang.Override
    public boolean hasNormalizeEnergy() {
      return ((bitField0_ & 0x00000200) != 0);
    }
    /**
     * <code>optional bool normalize_energy = 10 [default = false];</code>
     * @return The normalizeEnergy.
     */
    @java.lang.Override
    public boolean getNormalizeEnergy() {
      return normalizeEnergy_;
    }

    public static greco.CepstrumNorm.CepstrumNormParams parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static greco.CepstrumNorm.CepstrumNormParams parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static greco.CepstrumNorm.CepstrumNormParams parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static greco.CepstrumNorm.CepstrumNormParams parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static greco.CepstrumNorm.CepstrumNormParams parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static greco.CepstrumNorm.CepstrumNormParams parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static greco.CepstrumNorm.CepstrumNormParams parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static greco.CepstrumNorm.CepstrumNormParams parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static greco.CepstrumNorm.CepstrumNormParams parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static greco.CepstrumNorm.CepstrumNormParams parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static greco.CepstrumNorm.CepstrumNormParams parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static greco.CepstrumNorm.CepstrumNormParams parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(greco.CepstrumNorm.CepstrumNormParams prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code greco.CepstrumNormParams}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:greco.CepstrumNormParams)
        greco.CepstrumNorm.CepstrumNormParamsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return greco.CepstrumNorm.internal_static_greco_CepstrumNormParams_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return greco.CepstrumNorm.internal_static_greco_CepstrumNormParams_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                greco.CepstrumNorm.CepstrumNormParams.class, greco.CepstrumNorm.CepstrumNormParams.Builder.class);
      }

      // Construct using greco.CepstrumNorm.CepstrumNormParams.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        inputSize_ = 13;
        bitField0_ = (bitField0_ & ~0x00000001);
        energyIndex_ = 13;
        bitField0_ = (bitField0_ & ~0x00000002);
        varNormFloor_ = 1F;
        bitField0_ = (bitField0_ & ~0x00000004);
        silenceFloor_ = 50F;
        bitField0_ = (bitField0_ & ~0x00000008);
        energyScale_ = 0.1F;
        bitField0_ = (bitField0_ & ~0x00000010);
        useEndpointer_ = false;
        bitField0_ = (bitField0_ & ~0x00000020);
        normalizeCluster_ = false;
        bitField0_ = (bitField0_ & ~0x00000040);
        normalizeMean_ = true;
        bitField0_ = (bitField0_ & ~0x00000080);
        normalizeVariance_ = true;
        bitField0_ = (bitField0_ & ~0x00000100);
        normalizeEnergy_ = false;
        bitField0_ = (bitField0_ & ~0x00000200);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return greco.CepstrumNorm.internal_static_greco_CepstrumNormParams_descriptor;
      }

      @java.lang.Override
      public greco.CepstrumNorm.CepstrumNormParams getDefaultInstanceForType() {
        return greco.CepstrumNorm.CepstrumNormParams.getDefaultInstance();
      }

      @java.lang.Override
      public greco.CepstrumNorm.CepstrumNormParams build() {
        greco.CepstrumNorm.CepstrumNormParams result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public greco.CepstrumNorm.CepstrumNormParams buildPartial() {
        greco.CepstrumNorm.CepstrumNormParams result = new greco.CepstrumNorm.CepstrumNormParams(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          to_bitField0_ |= 0x00000001;
        }
        result.inputSize_ = inputSize_;
        if (((from_bitField0_ & 0x00000002) != 0)) {
          to_bitField0_ |= 0x00000002;
        }
        result.energyIndex_ = energyIndex_;
        if (((from_bitField0_ & 0x00000004) != 0)) {
          to_bitField0_ |= 0x00000004;
        }
        result.varNormFloor_ = varNormFloor_;
        if (((from_bitField0_ & 0x00000008) != 0)) {
          to_bitField0_ |= 0x00000008;
        }
        result.silenceFloor_ = silenceFloor_;
        if (((from_bitField0_ & 0x00000010) != 0)) {
          to_bitField0_ |= 0x00000010;
        }
        result.energyScale_ = energyScale_;
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.useEndpointer_ = useEndpointer_;
          to_bitField0_ |= 0x00000020;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.normalizeCluster_ = normalizeCluster_;
          to_bitField0_ |= 0x00000040;
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          to_bitField0_ |= 0x00000080;
        }
        result.normalizeMean_ = normalizeMean_;
        if (((from_bitField0_ & 0x00000100) != 0)) {
          to_bitField0_ |= 0x00000100;
        }
        result.normalizeVariance_ = normalizeVariance_;
        if (((from_bitField0_ & 0x00000200) != 0)) {
          result.normalizeEnergy_ = normalizeEnergy_;
          to_bitField0_ |= 0x00000200;
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      private int bitField0_;

      private int inputSize_ = 13;
      /**
       * <code>optional int32 input_size = 1 [default = 13];</code>
       * @return Whether the inputSize field is set.
       */
      @java.lang.Override
      public boolean hasInputSize() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional int32 input_size = 1 [default = 13];</code>
       * @return The inputSize.
       */
      @java.lang.Override
      public int getInputSize() {
        return inputSize_;
      }
      /**
       * <code>optional int32 input_size = 1 [default = 13];</code>
       * @param value The inputSize to set.
       * @return This builder for chaining.
       */
      public Builder setInputSize(int value) {
        bitField0_ |= 0x00000001;
        inputSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 input_size = 1 [default = 13];</code>
       * @return This builder for chaining.
       */
      public Builder clearInputSize() {
        bitField0_ = (bitField0_ & ~0x00000001);
        inputSize_ = 13;
        onChanged();
        return this;
      }

      private int energyIndex_ = 13;
      /**
       * <code>optional int32 energy_index = 2 [default = 13];</code>
       * @return Whether the energyIndex field is set.
       */
      @java.lang.Override
      public boolean hasEnergyIndex() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional int32 energy_index = 2 [default = 13];</code>
       * @return The energyIndex.
       */
      @java.lang.Override
      public int getEnergyIndex() {
        return energyIndex_;
      }
      /**
       * <code>optional int32 energy_index = 2 [default = 13];</code>
       * @param value The energyIndex to set.
       * @return This builder for chaining.
       */
      public Builder setEnergyIndex(int value) {
        bitField0_ |= 0x00000002;
        energyIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 energy_index = 2 [default = 13];</code>
       * @return This builder for chaining.
       */
      public Builder clearEnergyIndex() {
        bitField0_ = (bitField0_ & ~0x00000002);
        energyIndex_ = 13;
        onChanged();
        return this;
      }

      private float varNormFloor_ = 1F;
      /**
       * <code>optional float var_norm_floor = 3 [default = 1];</code>
       * @return Whether the varNormFloor field is set.
       */
      @java.lang.Override
      public boolean hasVarNormFloor() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>optional float var_norm_floor = 3 [default = 1];</code>
       * @return The varNormFloor.
       */
      @java.lang.Override
      public float getVarNormFloor() {
        return varNormFloor_;
      }
      /**
       * <code>optional float var_norm_floor = 3 [default = 1];</code>
       * @param value The varNormFloor to set.
       * @return This builder for chaining.
       */
      public Builder setVarNormFloor(float value) {
        bitField0_ |= 0x00000004;
        varNormFloor_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float var_norm_floor = 3 [default = 1];</code>
       * @return This builder for chaining.
       */
      public Builder clearVarNormFloor() {
        bitField0_ = (bitField0_ & ~0x00000004);
        varNormFloor_ = 1F;
        onChanged();
        return this;
      }

      private float silenceFloor_ = 50F;
      /**
       * <code>optional float silence_floor = 4 [default = 50];</code>
       * @return Whether the silenceFloor field is set.
       */
      @java.lang.Override
      public boolean hasSilenceFloor() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>optional float silence_floor = 4 [default = 50];</code>
       * @return The silenceFloor.
       */
      @java.lang.Override
      public float getSilenceFloor() {
        return silenceFloor_;
      }
      /**
       * <code>optional float silence_floor = 4 [default = 50];</code>
       * @param value The silenceFloor to set.
       * @return This builder for chaining.
       */
      public Builder setSilenceFloor(float value) {
        bitField0_ |= 0x00000008;
        silenceFloor_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float silence_floor = 4 [default = 50];</code>
       * @return This builder for chaining.
       */
      public Builder clearSilenceFloor() {
        bitField0_ = (bitField0_ & ~0x00000008);
        silenceFloor_ = 50F;
        onChanged();
        return this;
      }

      private float energyScale_ = 0.1F;
      /**
       * <code>optional float energy_scale = 5 [default = 0.1];</code>
       * @return Whether the energyScale field is set.
       */
      @java.lang.Override
      public boolean hasEnergyScale() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <code>optional float energy_scale = 5 [default = 0.1];</code>
       * @return The energyScale.
       */
      @java.lang.Override
      public float getEnergyScale() {
        return energyScale_;
      }
      /**
       * <code>optional float energy_scale = 5 [default = 0.1];</code>
       * @param value The energyScale to set.
       * @return This builder for chaining.
       */
      public Builder setEnergyScale(float value) {
        bitField0_ |= 0x00000010;
        energyScale_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float energy_scale = 5 [default = 0.1];</code>
       * @return This builder for chaining.
       */
      public Builder clearEnergyScale() {
        bitField0_ = (bitField0_ & ~0x00000010);
        energyScale_ = 0.1F;
        onChanged();
        return this;
      }

      private boolean useEndpointer_ ;
      /**
       * <code>optional bool use_endpointer = 6 [default = false];</code>
       * @return Whether the useEndpointer field is set.
       */
      @java.lang.Override
      public boolean hasUseEndpointer() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <code>optional bool use_endpointer = 6 [default = false];</code>
       * @return The useEndpointer.
       */
      @java.lang.Override
      public boolean getUseEndpointer() {
        return useEndpointer_;
      }
      /**
       * <code>optional bool use_endpointer = 6 [default = false];</code>
       * @param value The useEndpointer to set.
       * @return This builder for chaining.
       */
      public Builder setUseEndpointer(boolean value) {
        bitField0_ |= 0x00000020;
        useEndpointer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool use_endpointer = 6 [default = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearUseEndpointer() {
        bitField0_ = (bitField0_ & ~0x00000020);
        useEndpointer_ = false;
        onChanged();
        return this;
      }

      private boolean normalizeCluster_ ;
      /**
       * <code>optional bool normalize_cluster = 7 [default = false];</code>
       * @return Whether the normalizeCluster field is set.
       */
      @java.lang.Override
      public boolean hasNormalizeCluster() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <code>optional bool normalize_cluster = 7 [default = false];</code>
       * @return The normalizeCluster.
       */
      @java.lang.Override
      public boolean getNormalizeCluster() {
        return normalizeCluster_;
      }
      /**
       * <code>optional bool normalize_cluster = 7 [default = false];</code>
       * @param value The normalizeCluster to set.
       * @return This builder for chaining.
       */
      public Builder setNormalizeCluster(boolean value) {
        bitField0_ |= 0x00000040;
        normalizeCluster_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool normalize_cluster = 7 [default = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearNormalizeCluster() {
        bitField0_ = (bitField0_ & ~0x00000040);
        normalizeCluster_ = false;
        onChanged();
        return this;
      }

      private boolean normalizeMean_ = true;
      /**
       * <code>optional bool normalize_mean = 8 [default = true];</code>
       * @return Whether the normalizeMean field is set.
       */
      @java.lang.Override
      public boolean hasNormalizeMean() {
        return ((bitField0_ & 0x00000080) != 0);
      }
      /**
       * <code>optional bool normalize_mean = 8 [default = true];</code>
       * @return The normalizeMean.
       */
      @java.lang.Override
      public boolean getNormalizeMean() {
        return normalizeMean_;
      }
      /**
       * <code>optional bool normalize_mean = 8 [default = true];</code>
       * @param value The normalizeMean to set.
       * @return This builder for chaining.
       */
      public Builder setNormalizeMean(boolean value) {
        bitField0_ |= 0x00000080;
        normalizeMean_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool normalize_mean = 8 [default = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearNormalizeMean() {
        bitField0_ = (bitField0_ & ~0x00000080);
        normalizeMean_ = true;
        onChanged();
        return this;
      }

      private boolean normalizeVariance_ = true;
      /**
       * <code>optional bool normalize_variance = 9 [default = true];</code>
       * @return Whether the normalizeVariance field is set.
       */
      @java.lang.Override
      public boolean hasNormalizeVariance() {
        return ((bitField0_ & 0x00000100) != 0);
      }
      /**
       * <code>optional bool normalize_variance = 9 [default = true];</code>
       * @return The normalizeVariance.
       */
      @java.lang.Override
      public boolean getNormalizeVariance() {
        return normalizeVariance_;
      }
      /**
       * <code>optional bool normalize_variance = 9 [default = true];</code>
       * @param value The normalizeVariance to set.
       * @return This builder for chaining.
       */
      public Builder setNormalizeVariance(boolean value) {
        bitField0_ |= 0x00000100;
        normalizeVariance_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool normalize_variance = 9 [default = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearNormalizeVariance() {
        bitField0_ = (bitField0_ & ~0x00000100);
        normalizeVariance_ = true;
        onChanged();
        return this;
      }

      private boolean normalizeEnergy_ ;
      /**
       * <code>optional bool normalize_energy = 10 [default = false];</code>
       * @return Whether the normalizeEnergy field is set.
       */
      @java.lang.Override
      public boolean hasNormalizeEnergy() {
        return ((bitField0_ & 0x00000200) != 0);
      }
      /**
       * <code>optional bool normalize_energy = 10 [default = false];</code>
       * @return The normalizeEnergy.
       */
      @java.lang.Override
      public boolean getNormalizeEnergy() {
        return normalizeEnergy_;
      }
      /**
       * <code>optional bool normalize_energy = 10 [default = false];</code>
       * @param value The normalizeEnergy to set.
       * @return This builder for chaining.
       */
      public Builder setNormalizeEnergy(boolean value) {
        bitField0_ |= 0x00000200;
        normalizeEnergy_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool normalize_energy = 10 [default = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearNormalizeEnergy() {
        bitField0_ = (bitField0_ & ~0x00000200);
        normalizeEnergy_ = false;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:greco.CepstrumNormParams)
    }

    // @@protoc_insertion_point(class_scope:greco.CepstrumNormParams)
    private static final greco.CepstrumNorm.CepstrumNormParams DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new greco.CepstrumNorm.CepstrumNormParams();
    }

    public static greco.CepstrumNorm.CepstrumNormParams getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<CepstrumNormParams>
        PARSER = new com.google.protobuf.AbstractParser<CepstrumNormParams>() {
      @java.lang.Override
      public CepstrumNormParams parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(
                  builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<CepstrumNormParams> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CepstrumNormParams> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public greco.CepstrumNorm.CepstrumNormParams getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

    public static final int ID_FIELD_NUMBER = 22899771;
    /**
     * <code>extend .greco.Params { ... }</code>
     */
    public static final
      com.google.protobuf.GeneratedMessage.GeneratedExtension<
        greco.ParamsProto.Params,
        greco.CepstrumNorm.CepstrumNormParams> id = com.google.protobuf.GeneratedMessage
            .newMessageScopedGeneratedExtension(
          greco.CepstrumNorm.CepstrumNormParams.getDefaultInstance(),
          0,
          greco.CepstrumNorm.CepstrumNormParams.class,
          greco.CepstrumNorm.CepstrumNormParams.getDefaultInstance());
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_greco_CepstrumNormParams_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_greco_CepstrumNormParams_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n*speech/greco3/frontend/cepstrum_norm.p" +
      "roto\022\005greco\032\037speech/greco3/core/params.p" +
      "roto\"\362\002\n\022CepstrumNormParams\022\026\n\ninput_siz" +
      "e\030\001 \001(\005:\00213\022\030\n\014energy_index\030\002 \001(\005:\00213\022\031\n" +
      "\016var_norm_floor\030\003 \001(\002:\0011\022\031\n\rsilence_floo" +
      "r\030\004 \001(\002:\00250\022\031\n\014energy_scale\030\005 \001(\002:\0030.1\022\035" +
      "\n\016use_endpointer\030\006 \001(\010:\005false\022 \n\021normali" +
      "ze_cluster\030\007 \001(\010:\005false\022\034\n\016normalize_mea" +
      "n\030\010 \001(\010:\004true\022 \n\022normalize_variance\030\t \001(" +
      "\010:\004true\022\037\n\020normalize_energy\030\n \001(\010:\005false" +
      "27\n\002id\022\r.greco.Params\030\273\330\365\n \001(\0132\031.greco.C" +
      "epstrumNormParamsB\010H\002\242\002\003GRC"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          greco.ParamsProto.getDescriptor(),
        });
    internal_static_greco_CepstrumNormParams_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_greco_CepstrumNormParams_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_greco_CepstrumNormParams_descriptor,
        new java.lang.String[] { "InputSize", "EnergyIndex", "VarNormFloor", "SilenceFloor", "EnergyScale", "UseEndpointer", "NormalizeCluster", "NormalizeMean", "NormalizeVariance", "NormalizeEnergy", });
    greco.ParamsProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
