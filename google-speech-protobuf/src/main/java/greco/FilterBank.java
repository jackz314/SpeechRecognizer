// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speech/greco3/frontend/filter_bank.proto

package greco;

public final class FilterBank {
  private FilterBank() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
    registry.add(greco.FilterBank.FilterBankParams.id);
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface FilterBankParamsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:greco.FilterBankParams)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional int32 channel_count = 1 [default = 20];</code>
     * @return Whether the channelCount field is set.
     */
    boolean hasChannelCount();
    /**
     * <code>optional int32 channel_count = 1 [default = 20];</code>
     * @return The channelCount.
     */
    int getChannelCount();

    /**
     * <code>optional float upper_band_limit = 2 [default = 3800];</code>
     * @return Whether the upperBandLimit field is set.
     */
    boolean hasUpperBandLimit();
    /**
     * <code>optional float upper_band_limit = 2 [default = 3800];</code>
     * @return The upperBandLimit.
     */
    float getUpperBandLimit();

    /**
     * <code>optional float lower_band_limit = 3 [default = 125];</code>
     * @return Whether the lowerBandLimit field is set.
     */
    boolean hasLowerBandLimit();
    /**
     * <code>optional float lower_band_limit = 3 [default = 125];</code>
     * @return The lowerBandLimit.
     */
    float getLowerBandLimit();

    /**
     * <code>optional float vt_warp_factor = 4 [default = 1];</code>
     * @return Whether the vtWarpFactor field is set.
     */
    boolean hasVtWarpFactor();
    /**
     * <code>optional float vt_warp_factor = 4 [default = 1];</code>
     * @return The vtWarpFactor.
     */
    float getVtWarpFactor();

    /**
     * <code>optional float vt_upper_break = 5 [default = 3500];</code>
     * @return Whether the vtUpperBreak field is set.
     */
    boolean hasVtUpperBreak();
    /**
     * <code>optional float vt_upper_break = 5 [default = 3500];</code>
     * @return The vtUpperBreak.
     */
    float getVtUpperBreak();

    /**
     * <code>optional float vt_lower_break = 6 [default = 300];</code>
     * @return Whether the vtLowerBreak field is set.
     */
    boolean hasVtLowerBreak();
    /**
     * <code>optional float vt_lower_break = 6 [default = 300];</code>
     * @return The vtLowerBreak.
     */
    float getVtLowerBreak();

    /**
     * <code>optional float fbank_output_floor = 7 [default = 1];</code>
     * @return Whether the fbankOutputFloor field is set.
     */
    boolean hasFbankOutputFloor();
    /**
     * <code>optional float fbank_output_floor = 7 [default = 1];</code>
     * @return The fbankOutputFloor.
     */
    float getFbankOutputFloor();

    /**
     * <code>optional .greco.FilterBankParams.SummationDomain summation_domain = 8 [default = SUM_MAGNITUDE];</code>
     * @return Whether the summationDomain field is set.
     */
    boolean hasSummationDomain();
    /**
     * <code>optional .greco.FilterBankParams.SummationDomain summation_domain = 8 [default = SUM_MAGNITUDE];</code>
     * @return The summationDomain.
     */
    greco.FilterBank.FilterBankParams.SummationDomain getSummationDomain();

    /**
     * <code>optional .greco.FilterBankParams.OutputTransform output_transform = 9 [default = OUTPUT_LOG];</code>
     * @return Whether the outputTransform field is set.
     */
    boolean hasOutputTransform();
    /**
     * <code>optional .greco.FilterBankParams.OutputTransform output_transform = 9 [default = OUTPUT_LOG];</code>
     * @return The outputTransform.
     */
    greco.FilterBank.FilterBankParams.OutputTransform getOutputTransform();

    /**
     * <code>optional bool allow_extension_beyond_nyquist_freq = 10 [default = false];</code>
     * @return Whether the allowExtensionBeyondNyquistFreq field is set.
     */
    boolean hasAllowExtensionBeyondNyquistFreq();
    /**
     * <code>optional bool allow_extension_beyond_nyquist_freq = 10 [default = false];</code>
     * @return The allowExtensionBeyondNyquistFreq.
     */
    boolean getAllowExtensionBeyondNyquistFreq();

    /**
     * <code>optional float sample_rate_override = 11 [default = -1];</code>
     * @return Whether the sampleRateOverride field is set.
     */
    boolean hasSampleRateOverride();
    /**
     * <code>optional float sample_rate_override = 11 [default = -1];</code>
     * @return The sampleRateOverride.
     */
    float getSampleRateOverride();
  }
  /**
   * Protobuf type {@code greco.FilterBankParams}
   */
  public static final class FilterBankParams extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:greco.FilterBankParams)
      FilterBankParamsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use FilterBankParams.newBuilder() to construct.
    private FilterBankParams(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private FilterBankParams() {
      channelCount_ = 20;
      upperBandLimit_ = 3800F;
      lowerBandLimit_ = 125F;
      vtWarpFactor_ = 1F;
      vtUpperBreak_ = 3500F;
      vtLowerBreak_ = 300F;
      fbankOutputFloor_ = 1F;
      summationDomain_ = 1;
      outputTransform_ = 0;
      sampleRateOverride_ = -1F;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new FilterBankParams();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return greco.FilterBank.internal_static_greco_FilterBankParams_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return greco.FilterBank.internal_static_greco_FilterBankParams_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              greco.FilterBank.FilterBankParams.class, greco.FilterBank.FilterBankParams.Builder.class);
    }

    /**
     * Protobuf enum {@code greco.FilterBankParams.SummationDomain}
     */
    public enum SummationDomain
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>SUM_ENERGY = 0;</code>
       */
      SUM_ENERGY(0),
      /**
       * <code>SUM_MAGNITUDE = 1;</code>
       */
      SUM_MAGNITUDE(1),
      ;

      /**
       * <code>SUM_ENERGY = 0;</code>
       */
      public static final int SUM_ENERGY_VALUE = 0;
      /**
       * <code>SUM_MAGNITUDE = 1;</code>
       */
      public static final int SUM_MAGNITUDE_VALUE = 1;


      public final int getNumber() {
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static SummationDomain valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static SummationDomain forNumber(int value) {
        switch (value) {
          case 0: return SUM_ENERGY;
          case 1: return SUM_MAGNITUDE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<SummationDomain>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          SummationDomain> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<SummationDomain>() {
              public SummationDomain findValueByNumber(int number) {
                return SummationDomain.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return greco.FilterBank.FilterBankParams.getDescriptor().getEnumTypes().get(0);
      }

      private static final SummationDomain[] VALUES = values();

      public static SummationDomain valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private SummationDomain(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:greco.FilterBankParams.SummationDomain)
    }

    /**
     * Protobuf enum {@code greco.FilterBankParams.OutputTransform}
     */
    public enum OutputTransform
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>OUTPUT_LOG = 0;</code>
       */
      OUTPUT_LOG(0),
      /**
       * <code>OUTPUT_LINEAR = 1;</code>
       */
      OUTPUT_LINEAR(1),
      ;

      /**
       * <code>OUTPUT_LOG = 0;</code>
       */
      public static final int OUTPUT_LOG_VALUE = 0;
      /**
       * <code>OUTPUT_LINEAR = 1;</code>
       */
      public static final int OUTPUT_LINEAR_VALUE = 1;


      public final int getNumber() {
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static OutputTransform valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static OutputTransform forNumber(int value) {
        switch (value) {
          case 0: return OUTPUT_LOG;
          case 1: return OUTPUT_LINEAR;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<OutputTransform>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          OutputTransform> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<OutputTransform>() {
              public OutputTransform findValueByNumber(int number) {
                return OutputTransform.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return greco.FilterBank.FilterBankParams.getDescriptor().getEnumTypes().get(1);
      }

      private static final OutputTransform[] VALUES = values();

      public static OutputTransform valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private OutputTransform(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:greco.FilterBankParams.OutputTransform)
    }

    private int bitField0_;
    public static final int CHANNEL_COUNT_FIELD_NUMBER = 1;
    private int channelCount_;
    /**
     * <code>optional int32 channel_count = 1 [default = 20];</code>
     * @return Whether the channelCount field is set.
     */
    @java.lang.Override
    public boolean hasChannelCount() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional int32 channel_count = 1 [default = 20];</code>
     * @return The channelCount.
     */
    @java.lang.Override
    public int getChannelCount() {
      return channelCount_;
    }

    public static final int UPPER_BAND_LIMIT_FIELD_NUMBER = 2;
    private float upperBandLimit_;
    /**
     * <code>optional float upper_band_limit = 2 [default = 3800];</code>
     * @return Whether the upperBandLimit field is set.
     */
    @java.lang.Override
    public boolean hasUpperBandLimit() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>optional float upper_band_limit = 2 [default = 3800];</code>
     * @return The upperBandLimit.
     */
    @java.lang.Override
    public float getUpperBandLimit() {
      return upperBandLimit_;
    }

    public static final int LOWER_BAND_LIMIT_FIELD_NUMBER = 3;
    private float lowerBandLimit_;
    /**
     * <code>optional float lower_band_limit = 3 [default = 125];</code>
     * @return Whether the lowerBandLimit field is set.
     */
    @java.lang.Override
    public boolean hasLowerBandLimit() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>optional float lower_band_limit = 3 [default = 125];</code>
     * @return The lowerBandLimit.
     */
    @java.lang.Override
    public float getLowerBandLimit() {
      return lowerBandLimit_;
    }

    public static final int VT_WARP_FACTOR_FIELD_NUMBER = 4;
    private float vtWarpFactor_;
    /**
     * <code>optional float vt_warp_factor = 4 [default = 1];</code>
     * @return Whether the vtWarpFactor field is set.
     */
    @java.lang.Override
    public boolean hasVtWarpFactor() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>optional float vt_warp_factor = 4 [default = 1];</code>
     * @return The vtWarpFactor.
     */
    @java.lang.Override
    public float getVtWarpFactor() {
      return vtWarpFactor_;
    }

    public static final int VT_UPPER_BREAK_FIELD_NUMBER = 5;
    private float vtUpperBreak_;
    /**
     * <code>optional float vt_upper_break = 5 [default = 3500];</code>
     * @return Whether the vtUpperBreak field is set.
     */
    @java.lang.Override
    public boolean hasVtUpperBreak() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <code>optional float vt_upper_break = 5 [default = 3500];</code>
     * @return The vtUpperBreak.
     */
    @java.lang.Override
    public float getVtUpperBreak() {
      return vtUpperBreak_;
    }

    public static final int VT_LOWER_BREAK_FIELD_NUMBER = 6;
    private float vtLowerBreak_;
    /**
     * <code>optional float vt_lower_break = 6 [default = 300];</code>
     * @return Whether the vtLowerBreak field is set.
     */
    @java.lang.Override
    public boolean hasVtLowerBreak() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <code>optional float vt_lower_break = 6 [default = 300];</code>
     * @return The vtLowerBreak.
     */
    @java.lang.Override
    public float getVtLowerBreak() {
      return vtLowerBreak_;
    }

    public static final int FBANK_OUTPUT_FLOOR_FIELD_NUMBER = 7;
    private float fbankOutputFloor_;
    /**
     * <code>optional float fbank_output_floor = 7 [default = 1];</code>
     * @return Whether the fbankOutputFloor field is set.
     */
    @java.lang.Override
    public boolean hasFbankOutputFloor() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <code>optional float fbank_output_floor = 7 [default = 1];</code>
     * @return The fbankOutputFloor.
     */
    @java.lang.Override
    public float getFbankOutputFloor() {
      return fbankOutputFloor_;
    }

    public static final int SUMMATION_DOMAIN_FIELD_NUMBER = 8;
    private int summationDomain_;
    /**
     * <code>optional .greco.FilterBankParams.SummationDomain summation_domain = 8 [default = SUM_MAGNITUDE];</code>
     * @return Whether the summationDomain field is set.
     */
    @java.lang.Override public boolean hasSummationDomain() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <code>optional .greco.FilterBankParams.SummationDomain summation_domain = 8 [default = SUM_MAGNITUDE];</code>
     * @return The summationDomain.
     */
    @java.lang.Override public greco.FilterBank.FilterBankParams.SummationDomain getSummationDomain() {
      @SuppressWarnings("deprecation")
      greco.FilterBank.FilterBankParams.SummationDomain result = greco.FilterBank.FilterBankParams.SummationDomain.valueOf(summationDomain_);
      return result == null ? greco.FilterBank.FilterBankParams.SummationDomain.SUM_MAGNITUDE : result;
    }

    public static final int OUTPUT_TRANSFORM_FIELD_NUMBER = 9;
    private int outputTransform_;
    /**
     * <code>optional .greco.FilterBankParams.OutputTransform output_transform = 9 [default = OUTPUT_LOG];</code>
     * @return Whether the outputTransform field is set.
     */
    @java.lang.Override public boolean hasOutputTransform() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <code>optional .greco.FilterBankParams.OutputTransform output_transform = 9 [default = OUTPUT_LOG];</code>
     * @return The outputTransform.
     */
    @java.lang.Override public greco.FilterBank.FilterBankParams.OutputTransform getOutputTransform() {
      @SuppressWarnings("deprecation")
      greco.FilterBank.FilterBankParams.OutputTransform result = greco.FilterBank.FilterBankParams.OutputTransform.valueOf(outputTransform_);
      return result == null ? greco.FilterBank.FilterBankParams.OutputTransform.OUTPUT_LOG : result;
    }

    public static final int ALLOW_EXTENSION_BEYOND_NYQUIST_FREQ_FIELD_NUMBER = 10;
    private boolean allowExtensionBeyondNyquistFreq_;
    /**
     * <code>optional bool allow_extension_beyond_nyquist_freq = 10 [default = false];</code>
     * @return Whether the allowExtensionBeyondNyquistFreq field is set.
     */
    @java.lang.Override
    public boolean hasAllowExtensionBeyondNyquistFreq() {
      return ((bitField0_ & 0x00000200) != 0);
    }
    /**
     * <code>optional bool allow_extension_beyond_nyquist_freq = 10 [default = false];</code>
     * @return The allowExtensionBeyondNyquistFreq.
     */
    @java.lang.Override
    public boolean getAllowExtensionBeyondNyquistFreq() {
      return allowExtensionBeyondNyquistFreq_;
    }

    public static final int SAMPLE_RATE_OVERRIDE_FIELD_NUMBER = 11;
    private float sampleRateOverride_;
    /**
     * <code>optional float sample_rate_override = 11 [default = -1];</code>
     * @return Whether the sampleRateOverride field is set.
     */
    @java.lang.Override
    public boolean hasSampleRateOverride() {
      return ((bitField0_ & 0x00000400) != 0);
    }
    /**
     * <code>optional float sample_rate_override = 11 [default = -1];</code>
     * @return The sampleRateOverride.
     */
    @java.lang.Override
    public float getSampleRateOverride() {
      return sampleRateOverride_;
    }

    public static greco.FilterBank.FilterBankParams parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static greco.FilterBank.FilterBankParams parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static greco.FilterBank.FilterBankParams parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static greco.FilterBank.FilterBankParams parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static greco.FilterBank.FilterBankParams parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static greco.FilterBank.FilterBankParams parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static greco.FilterBank.FilterBankParams parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static greco.FilterBank.FilterBankParams parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static greco.FilterBank.FilterBankParams parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static greco.FilterBank.FilterBankParams parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static greco.FilterBank.FilterBankParams parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static greco.FilterBank.FilterBankParams parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(greco.FilterBank.FilterBankParams prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code greco.FilterBankParams}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:greco.FilterBankParams)
        greco.FilterBank.FilterBankParamsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return greco.FilterBank.internal_static_greco_FilterBankParams_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return greco.FilterBank.internal_static_greco_FilterBankParams_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                greco.FilterBank.FilterBankParams.class, greco.FilterBank.FilterBankParams.Builder.class);
      }

      // Construct using greco.FilterBank.FilterBankParams.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        channelCount_ = 20;
        bitField0_ = (bitField0_ & ~0x00000001);
        upperBandLimit_ = 3800F;
        bitField0_ = (bitField0_ & ~0x00000002);
        lowerBandLimit_ = 125F;
        bitField0_ = (bitField0_ & ~0x00000004);
        vtWarpFactor_ = 1F;
        bitField0_ = (bitField0_ & ~0x00000008);
        vtUpperBreak_ = 3500F;
        bitField0_ = (bitField0_ & ~0x00000010);
        vtLowerBreak_ = 300F;
        bitField0_ = (bitField0_ & ~0x00000020);
        fbankOutputFloor_ = 1F;
        bitField0_ = (bitField0_ & ~0x00000040);
        summationDomain_ = 1;
        bitField0_ = (bitField0_ & ~0x00000080);
        outputTransform_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        allowExtensionBeyondNyquistFreq_ = false;
        bitField0_ = (bitField0_ & ~0x00000200);
        sampleRateOverride_ = -1F;
        bitField0_ = (bitField0_ & ~0x00000400);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return greco.FilterBank.internal_static_greco_FilterBankParams_descriptor;
      }

      @java.lang.Override
      public greco.FilterBank.FilterBankParams getDefaultInstanceForType() {
        return greco.FilterBank.FilterBankParams.getDefaultInstance();
      }

      @java.lang.Override
      public greco.FilterBank.FilterBankParams build() {
        greco.FilterBank.FilterBankParams result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public greco.FilterBank.FilterBankParams buildPartial() {
        greco.FilterBank.FilterBankParams result = new greco.FilterBank.FilterBankParams(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          to_bitField0_ |= 0x00000001;
        }
        result.channelCount_ = channelCount_;
        if (((from_bitField0_ & 0x00000002) != 0)) {
          to_bitField0_ |= 0x00000002;
        }
        result.upperBandLimit_ = upperBandLimit_;
        if (((from_bitField0_ & 0x00000004) != 0)) {
          to_bitField0_ |= 0x00000004;
        }
        result.lowerBandLimit_ = lowerBandLimit_;
        if (((from_bitField0_ & 0x00000008) != 0)) {
          to_bitField0_ |= 0x00000008;
        }
        result.vtWarpFactor_ = vtWarpFactor_;
        if (((from_bitField0_ & 0x00000010) != 0)) {
          to_bitField0_ |= 0x00000010;
        }
        result.vtUpperBreak_ = vtUpperBreak_;
        if (((from_bitField0_ & 0x00000020) != 0)) {
          to_bitField0_ |= 0x00000020;
        }
        result.vtLowerBreak_ = vtLowerBreak_;
        if (((from_bitField0_ & 0x00000040) != 0)) {
          to_bitField0_ |= 0x00000040;
        }
        result.fbankOutputFloor_ = fbankOutputFloor_;
        if (((from_bitField0_ & 0x00000080) != 0)) {
          to_bitField0_ |= 0x00000080;
        }
        result.summationDomain_ = summationDomain_;
        if (((from_bitField0_ & 0x00000100) != 0)) {
          to_bitField0_ |= 0x00000100;
        }
        result.outputTransform_ = outputTransform_;
        if (((from_bitField0_ & 0x00000200) != 0)) {
          result.allowExtensionBeyondNyquistFreq_ = allowExtensionBeyondNyquistFreq_;
          to_bitField0_ |= 0x00000200;
        }
        if (((from_bitField0_ & 0x00000400) != 0)) {
          to_bitField0_ |= 0x00000400;
        }
        result.sampleRateOverride_ = sampleRateOverride_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      private int bitField0_;

      private int channelCount_ = 20;
      /**
       * <code>optional int32 channel_count = 1 [default = 20];</code>
       * @return Whether the channelCount field is set.
       */
      @java.lang.Override
      public boolean hasChannelCount() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional int32 channel_count = 1 [default = 20];</code>
       * @return The channelCount.
       */
      @java.lang.Override
      public int getChannelCount() {
        return channelCount_;
      }
      /**
       * <code>optional int32 channel_count = 1 [default = 20];</code>
       * @param value The channelCount to set.
       * @return This builder for chaining.
       */
      public Builder setChannelCount(int value) {
        bitField0_ |= 0x00000001;
        channelCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 channel_count = 1 [default = 20];</code>
       * @return This builder for chaining.
       */
      public Builder clearChannelCount() {
        bitField0_ = (bitField0_ & ~0x00000001);
        channelCount_ = 20;
        onChanged();
        return this;
      }

      private float upperBandLimit_ = 3800F;
      /**
       * <code>optional float upper_band_limit = 2 [default = 3800];</code>
       * @return Whether the upperBandLimit field is set.
       */
      @java.lang.Override
      public boolean hasUpperBandLimit() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional float upper_band_limit = 2 [default = 3800];</code>
       * @return The upperBandLimit.
       */
      @java.lang.Override
      public float getUpperBandLimit() {
        return upperBandLimit_;
      }
      /**
       * <code>optional float upper_band_limit = 2 [default = 3800];</code>
       * @param value The upperBandLimit to set.
       * @return This builder for chaining.
       */
      public Builder setUpperBandLimit(float value) {
        bitField0_ |= 0x00000002;
        upperBandLimit_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float upper_band_limit = 2 [default = 3800];</code>
       * @return This builder for chaining.
       */
      public Builder clearUpperBandLimit() {
        bitField0_ = (bitField0_ & ~0x00000002);
        upperBandLimit_ = 3800F;
        onChanged();
        return this;
      }

      private float lowerBandLimit_ = 125F;
      /**
       * <code>optional float lower_band_limit = 3 [default = 125];</code>
       * @return Whether the lowerBandLimit field is set.
       */
      @java.lang.Override
      public boolean hasLowerBandLimit() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>optional float lower_band_limit = 3 [default = 125];</code>
       * @return The lowerBandLimit.
       */
      @java.lang.Override
      public float getLowerBandLimit() {
        return lowerBandLimit_;
      }
      /**
       * <code>optional float lower_band_limit = 3 [default = 125];</code>
       * @param value The lowerBandLimit to set.
       * @return This builder for chaining.
       */
      public Builder setLowerBandLimit(float value) {
        bitField0_ |= 0x00000004;
        lowerBandLimit_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float lower_band_limit = 3 [default = 125];</code>
       * @return This builder for chaining.
       */
      public Builder clearLowerBandLimit() {
        bitField0_ = (bitField0_ & ~0x00000004);
        lowerBandLimit_ = 125F;
        onChanged();
        return this;
      }

      private float vtWarpFactor_ = 1F;
      /**
       * <code>optional float vt_warp_factor = 4 [default = 1];</code>
       * @return Whether the vtWarpFactor field is set.
       */
      @java.lang.Override
      public boolean hasVtWarpFactor() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>optional float vt_warp_factor = 4 [default = 1];</code>
       * @return The vtWarpFactor.
       */
      @java.lang.Override
      public float getVtWarpFactor() {
        return vtWarpFactor_;
      }
      /**
       * <code>optional float vt_warp_factor = 4 [default = 1];</code>
       * @param value The vtWarpFactor to set.
       * @return This builder for chaining.
       */
      public Builder setVtWarpFactor(float value) {
        bitField0_ |= 0x00000008;
        vtWarpFactor_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float vt_warp_factor = 4 [default = 1];</code>
       * @return This builder for chaining.
       */
      public Builder clearVtWarpFactor() {
        bitField0_ = (bitField0_ & ~0x00000008);
        vtWarpFactor_ = 1F;
        onChanged();
        return this;
      }

      private float vtUpperBreak_ = 3500F;
      /**
       * <code>optional float vt_upper_break = 5 [default = 3500];</code>
       * @return Whether the vtUpperBreak field is set.
       */
      @java.lang.Override
      public boolean hasVtUpperBreak() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <code>optional float vt_upper_break = 5 [default = 3500];</code>
       * @return The vtUpperBreak.
       */
      @java.lang.Override
      public float getVtUpperBreak() {
        return vtUpperBreak_;
      }
      /**
       * <code>optional float vt_upper_break = 5 [default = 3500];</code>
       * @param value The vtUpperBreak to set.
       * @return This builder for chaining.
       */
      public Builder setVtUpperBreak(float value) {
        bitField0_ |= 0x00000010;
        vtUpperBreak_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float vt_upper_break = 5 [default = 3500];</code>
       * @return This builder for chaining.
       */
      public Builder clearVtUpperBreak() {
        bitField0_ = (bitField0_ & ~0x00000010);
        vtUpperBreak_ = 3500F;
        onChanged();
        return this;
      }

      private float vtLowerBreak_ = 300F;
      /**
       * <code>optional float vt_lower_break = 6 [default = 300];</code>
       * @return Whether the vtLowerBreak field is set.
       */
      @java.lang.Override
      public boolean hasVtLowerBreak() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <code>optional float vt_lower_break = 6 [default = 300];</code>
       * @return The vtLowerBreak.
       */
      @java.lang.Override
      public float getVtLowerBreak() {
        return vtLowerBreak_;
      }
      /**
       * <code>optional float vt_lower_break = 6 [default = 300];</code>
       * @param value The vtLowerBreak to set.
       * @return This builder for chaining.
       */
      public Builder setVtLowerBreak(float value) {
        bitField0_ |= 0x00000020;
        vtLowerBreak_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float vt_lower_break = 6 [default = 300];</code>
       * @return This builder for chaining.
       */
      public Builder clearVtLowerBreak() {
        bitField0_ = (bitField0_ & ~0x00000020);
        vtLowerBreak_ = 300F;
        onChanged();
        return this;
      }

      private float fbankOutputFloor_ = 1F;
      /**
       * <code>optional float fbank_output_floor = 7 [default = 1];</code>
       * @return Whether the fbankOutputFloor field is set.
       */
      @java.lang.Override
      public boolean hasFbankOutputFloor() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <code>optional float fbank_output_floor = 7 [default = 1];</code>
       * @return The fbankOutputFloor.
       */
      @java.lang.Override
      public float getFbankOutputFloor() {
        return fbankOutputFloor_;
      }
      /**
       * <code>optional float fbank_output_floor = 7 [default = 1];</code>
       * @param value The fbankOutputFloor to set.
       * @return This builder for chaining.
       */
      public Builder setFbankOutputFloor(float value) {
        bitField0_ |= 0x00000040;
        fbankOutputFloor_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float fbank_output_floor = 7 [default = 1];</code>
       * @return This builder for chaining.
       */
      public Builder clearFbankOutputFloor() {
        bitField0_ = (bitField0_ & ~0x00000040);
        fbankOutputFloor_ = 1F;
        onChanged();
        return this;
      }

      private int summationDomain_ = 1;
      /**
       * <code>optional .greco.FilterBankParams.SummationDomain summation_domain = 8 [default = SUM_MAGNITUDE];</code>
       * @return Whether the summationDomain field is set.
       */
      @java.lang.Override public boolean hasSummationDomain() {
        return ((bitField0_ & 0x00000080) != 0);
      }
      /**
       * <code>optional .greco.FilterBankParams.SummationDomain summation_domain = 8 [default = SUM_MAGNITUDE];</code>
       * @return The summationDomain.
       */
      @java.lang.Override
      public greco.FilterBank.FilterBankParams.SummationDomain getSummationDomain() {
        @SuppressWarnings("deprecation")
        greco.FilterBank.FilterBankParams.SummationDomain result = greco.FilterBank.FilterBankParams.SummationDomain.valueOf(summationDomain_);
        return result == null ? greco.FilterBank.FilterBankParams.SummationDomain.SUM_MAGNITUDE : result;
      }
      /**
       * <code>optional .greco.FilterBankParams.SummationDomain summation_domain = 8 [default = SUM_MAGNITUDE];</code>
       * @param value The summationDomain to set.
       * @return This builder for chaining.
       */
      public Builder setSummationDomain(greco.FilterBank.FilterBankParams.SummationDomain value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000080;
        summationDomain_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .greco.FilterBankParams.SummationDomain summation_domain = 8 [default = SUM_MAGNITUDE];</code>
       * @return This builder for chaining.
       */
      public Builder clearSummationDomain() {
        bitField0_ = (bitField0_ & ~0x00000080);
        summationDomain_ = 1;
        onChanged();
        return this;
      }

      private int outputTransform_ = 0;
      /**
       * <code>optional .greco.FilterBankParams.OutputTransform output_transform = 9 [default = OUTPUT_LOG];</code>
       * @return Whether the outputTransform field is set.
       */
      @java.lang.Override public boolean hasOutputTransform() {
        return ((bitField0_ & 0x00000100) != 0);
      }
      /**
       * <code>optional .greco.FilterBankParams.OutputTransform output_transform = 9 [default = OUTPUT_LOG];</code>
       * @return The outputTransform.
       */
      @java.lang.Override
      public greco.FilterBank.FilterBankParams.OutputTransform getOutputTransform() {
        @SuppressWarnings("deprecation")
        greco.FilterBank.FilterBankParams.OutputTransform result = greco.FilterBank.FilterBankParams.OutputTransform.valueOf(outputTransform_);
        return result == null ? greco.FilterBank.FilterBankParams.OutputTransform.OUTPUT_LOG : result;
      }
      /**
       * <code>optional .greco.FilterBankParams.OutputTransform output_transform = 9 [default = OUTPUT_LOG];</code>
       * @param value The outputTransform to set.
       * @return This builder for chaining.
       */
      public Builder setOutputTransform(greco.FilterBank.FilterBankParams.OutputTransform value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000100;
        outputTransform_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .greco.FilterBankParams.OutputTransform output_transform = 9 [default = OUTPUT_LOG];</code>
       * @return This builder for chaining.
       */
      public Builder clearOutputTransform() {
        bitField0_ = (bitField0_ & ~0x00000100);
        outputTransform_ = 0;
        onChanged();
        return this;
      }

      private boolean allowExtensionBeyondNyquistFreq_ ;
      /**
       * <code>optional bool allow_extension_beyond_nyquist_freq = 10 [default = false];</code>
       * @return Whether the allowExtensionBeyondNyquistFreq field is set.
       */
      @java.lang.Override
      public boolean hasAllowExtensionBeyondNyquistFreq() {
        return ((bitField0_ & 0x00000200) != 0);
      }
      /**
       * <code>optional bool allow_extension_beyond_nyquist_freq = 10 [default = false];</code>
       * @return The allowExtensionBeyondNyquistFreq.
       */
      @java.lang.Override
      public boolean getAllowExtensionBeyondNyquistFreq() {
        return allowExtensionBeyondNyquistFreq_;
      }
      /**
       * <code>optional bool allow_extension_beyond_nyquist_freq = 10 [default = false];</code>
       * @param value The allowExtensionBeyondNyquistFreq to set.
       * @return This builder for chaining.
       */
      public Builder setAllowExtensionBeyondNyquistFreq(boolean value) {
        bitField0_ |= 0x00000200;
        allowExtensionBeyondNyquistFreq_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool allow_extension_beyond_nyquist_freq = 10 [default = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearAllowExtensionBeyondNyquistFreq() {
        bitField0_ = (bitField0_ & ~0x00000200);
        allowExtensionBeyondNyquistFreq_ = false;
        onChanged();
        return this;
      }

      private float sampleRateOverride_ = -1F;
      /**
       * <code>optional float sample_rate_override = 11 [default = -1];</code>
       * @return Whether the sampleRateOverride field is set.
       */
      @java.lang.Override
      public boolean hasSampleRateOverride() {
        return ((bitField0_ & 0x00000400) != 0);
      }
      /**
       * <code>optional float sample_rate_override = 11 [default = -1];</code>
       * @return The sampleRateOverride.
       */
      @java.lang.Override
      public float getSampleRateOverride() {
        return sampleRateOverride_;
      }
      /**
       * <code>optional float sample_rate_override = 11 [default = -1];</code>
       * @param value The sampleRateOverride to set.
       * @return This builder for chaining.
       */
      public Builder setSampleRateOverride(float value) {
        bitField0_ |= 0x00000400;
        sampleRateOverride_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float sample_rate_override = 11 [default = -1];</code>
       * @return This builder for chaining.
       */
      public Builder clearSampleRateOverride() {
        bitField0_ = (bitField0_ & ~0x00000400);
        sampleRateOverride_ = -1F;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:greco.FilterBankParams)
    }

    // @@protoc_insertion_point(class_scope:greco.FilterBankParams)
    private static final greco.FilterBank.FilterBankParams DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new greco.FilterBank.FilterBankParams();
    }

    public static greco.FilterBank.FilterBankParams getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<FilterBankParams>
        PARSER = new com.google.protobuf.AbstractParser<FilterBankParams>() {
      @java.lang.Override
      public FilterBankParams parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(
                  builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<FilterBankParams> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<FilterBankParams> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public greco.FilterBank.FilterBankParams getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

    public static final int ID_FIELD_NUMBER = 18905716;
    /**
     * <code>extend .greco.Params { ... }</code>
     */
    public static final
      com.google.protobuf.GeneratedMessage.GeneratedExtension<
        greco.ParamsProto.Params,
        greco.FilterBank.FilterBankParams> id = com.google.protobuf.GeneratedMessage
            .newMessageScopedGeneratedExtension(
          greco.FilterBank.FilterBankParams.getDefaultInstance(),
          0,
          greco.FilterBank.FilterBankParams.class,
          greco.FilterBank.FilterBankParams.getDefaultInstance());
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_greco_FilterBankParams_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_greco_FilterBankParams_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n(speech/greco3/frontend/filter_bank.pro" +
      "to\022\005greco\032\037speech/greco3/core/params.pro" +
      "to\"\373\004\n\020FilterBankParams\022\031\n\rchannel_count" +
      "\030\001 \001(\005:\00220\022\036\n\020upper_band_limit\030\002 \001(\002:\00438" +
      "00\022\035\n\020lower_band_limit\030\003 \001(\002:\003125\022\031\n\016vt_" +
      "warp_factor\030\004 \001(\002:\0011\022\034\n\016vt_upper_break\030\005" +
      " \001(\002:\0043500\022\033\n\016vt_lower_break\030\006 \001(\002:\003300\022" +
      "\035\n\022fbank_output_floor\030\007 \001(\002:\0011\022P\n\020summat" +
      "ion_domain\030\010 \001(\0162\'.greco.FilterBankParam" +
      "s.SummationDomain:\rSUM_MAGNITUDE\022M\n\020outp" +
      "ut_transform\030\t \001(\0162\'.greco.FilterBankPar" +
      "ams.OutputTransform:\nOUTPUT_LOG\0222\n#allow" +
      "_extension_beyond_nyquist_freq\030\n \001(\010:\005fa" +
      "lse\022 \n\024sample_rate_override\030\013 \001(\002:\002-1\"4\n" +
      "\017SummationDomain\022\016\n\nSUM_ENERGY\020\000\022\021\n\rSUM_" +
      "MAGNITUDE\020\001\"4\n\017OutputTransform\022\016\n\nOUTPUT" +
      "_LOG\020\000\022\021\n\rOUTPUT_LINEAR\020\00125\n\002id\022\r.greco." +
      "Params\030\364\364\201\t \001(\0132\027.greco.FilterBankParams" +
      "B\010H\002\242\002\003GRC"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          greco.ParamsProto.getDescriptor(),
        });
    internal_static_greco_FilterBankParams_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_greco_FilterBankParams_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_greco_FilterBankParams_descriptor,
        new java.lang.String[] { "ChannelCount", "UpperBandLimit", "LowerBandLimit", "VtWarpFactor", "VtUpperBreak", "VtLowerBreak", "FbankOutputFloor", "SummationDomain", "OutputTransform", "AllowExtensionBeyondNyquistFreq", "SampleRateOverride", });
    greco.ParamsProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
