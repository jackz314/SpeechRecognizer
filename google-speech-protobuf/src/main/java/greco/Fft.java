// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speech/greco3/frontend/fft.proto

package greco;

public final class Fft {
  private Fft() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
    registry.add(greco.Fft.FftParams.id);
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface FftParamsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:greco.FftParams)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional int32 input_length_ms = 1 [default = 25];</code>
     * @return Whether the inputLengthMs field is set.
     */
    boolean hasInputLengthMs();
    /**
     * <code>optional int32 input_length_ms = 1 [default = 25];</code>
     * @return The inputLengthMs.
     */
    int getInputLengthMs();

    /**
     * <code>optional bool expect_real_and_imaginary = 12;</code>
     * @return Whether the expectRealAndImaginary field is set.
     */
    boolean hasExpectRealAndImaginary();
    /**
     * <code>optional bool expect_real_and_imaginary = 12;</code>
     * @return The expectRealAndImaginary.
     */
    boolean getExpectRealAndImaginary();

    /**
     * <code>optional int32 min_fft_size = 2 [default = 512];</code>
     * @return Whether the minFftSize field is set.
     */
    boolean hasMinFftSize();
    /**
     * <code>optional int32 min_fft_size = 2 [default = 512];</code>
     * @return The minFftSize.
     */
    int getMinFftSize();

    /**
     * <code>optional float min_frequency_oversampling_ratio = 3 [default = 0];</code>
     * @return Whether the minFrequencyOversamplingRatio field is set.
     */
    boolean hasMinFrequencyOversamplingRatio();
    /**
     * <code>optional float min_frequency_oversampling_ratio = 3 [default = 0];</code>
     * @return The minFrequencyOversamplingRatio.
     */
    float getMinFrequencyOversamplingRatio();

    /**
     * <code>optional .greco.FftParams.FftType output_conversion = 4 [default = MAGNITUDE_SQUARED];</code>
     * @return Whether the outputConversion field is set.
     */
    boolean hasOutputConversion();
    /**
     * <code>optional .greco.FftParams.FftType output_conversion = 4 [default = MAGNITUDE_SQUARED];</code>
     * @return The outputConversion.
     */
    greco.Fft.FftParams.FftType getOutputConversion();

    /**
     * <code>optional bool fft_overdrive = 5 [default = false];</code>
     * @return Whether the fftOverdrive field is set.
     */
    boolean hasFftOverdrive();
    /**
     * <code>optional bool fft_overdrive = 5 [default = false];</code>
     * @return The fftOverdrive.
     */
    boolean getFftOverdrive();

    /**
     * <code>optional bool compute_inverse = 6 [default = false];</code>
     * @return Whether the computeInverse field is set.
     */
    boolean hasComputeInverse();
    /**
     * <code>optional bool compute_inverse = 6 [default = false];</code>
     * @return The computeInverse.
     */
    boolean getComputeInverse();

    /**
     * <code>optional bool return_full_frame = 7 [default = false];</code>
     * @return Whether the returnFullFrame field is set.
     */
    boolean hasReturnFullFrame();
    /**
     * <code>optional bool return_full_frame = 7 [default = false];</code>
     * @return The returnFullFrame.
     */
    boolean getReturnFullFrame();

    /**
     * <code>optional float frequency_per_bin = 9 [default = 0];</code>
     * @return Whether the frequencyPerBin field is set.
     */
    boolean hasFrequencyPerBin();
    /**
     * <code>optional float frequency_per_bin = 9 [default = 0];</code>
     * @return The frequencyPerBin.
     */
    float getFrequencyPerBin();

    /**
     * <code>optional bool auto_scale_output = 10 [default = false];</code>
     * @return Whether the autoScaleOutput field is set.
     */
    boolean hasAutoScaleOutput();
    /**
     * <code>optional bool auto_scale_output = 10 [default = false];</code>
     * @return The autoScaleOutput.
     */
    boolean getAutoScaleOutput();

    /**
     * <code>optional float sample_rate_override = 11 [default = -1];</code>
     * @return Whether the sampleRateOverride field is set.
     */
    boolean hasSampleRateOverride();
    /**
     * <code>optional float sample_rate_override = 11 [default = -1];</code>
     * @return The sampleRateOverride.
     */
    float getSampleRateOverride();
  }
  /**
   * Protobuf type {@code greco.FftParams}
   */
  public static final class FftParams extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:greco.FftParams)
      FftParamsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use FftParams.newBuilder() to construct.
    private FftParams(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private FftParams() {
      inputLengthMs_ = 25;
      minFftSize_ = 512;
      outputConversion_ = 4;
      sampleRateOverride_ = -1F;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new FftParams();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return greco.Fft.internal_static_greco_FftParams_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return greco.Fft.internal_static_greco_FftParams_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              greco.Fft.FftParams.class, greco.Fft.FftParams.Builder.class);
    }

    /**
     * Protobuf enum {@code greco.FftParams.FftType}
     */
    public enum FftType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>REAL = 0;</code>
       */
      REAL(0),
      /**
       * <code>IMAGINARY = 1;</code>
       */
      IMAGINARY(1),
      /**
       * <code>REAL_AND_IMAGINARY = 2;</code>
       */
      REAL_AND_IMAGINARY(2),
      /**
       * <code>DB_MAGNITUDE = 3;</code>
       */
      DB_MAGNITUDE(3),
      /**
       * <code>MAGNITUDE_SQUARED = 4;</code>
       */
      MAGNITUDE_SQUARED(4),
      /**
       * <code>MAGNITUDE = 5;</code>
       */
      MAGNITUDE(5),
      /**
       * <code>REAL_AND_IMAGINARY_STRIP_ZEROS = 6;</code>
       */
      REAL_AND_IMAGINARY_STRIP_ZEROS(6),
      /**
       * <code>PHASE = 7;</code>
       */
      PHASE(7),
      ;

      /**
       * <code>REAL = 0;</code>
       */
      public static final int REAL_VALUE = 0;
      /**
       * <code>IMAGINARY = 1;</code>
       */
      public static final int IMAGINARY_VALUE = 1;
      /**
       * <code>REAL_AND_IMAGINARY = 2;</code>
       */
      public static final int REAL_AND_IMAGINARY_VALUE = 2;
      /**
       * <code>DB_MAGNITUDE = 3;</code>
       */
      public static final int DB_MAGNITUDE_VALUE = 3;
      /**
       * <code>MAGNITUDE_SQUARED = 4;</code>
       */
      public static final int MAGNITUDE_SQUARED_VALUE = 4;
      /**
       * <code>MAGNITUDE = 5;</code>
       */
      public static final int MAGNITUDE_VALUE = 5;
      /**
       * <code>REAL_AND_IMAGINARY_STRIP_ZEROS = 6;</code>
       */
      public static final int REAL_AND_IMAGINARY_STRIP_ZEROS_VALUE = 6;
      /**
       * <code>PHASE = 7;</code>
       */
      public static final int PHASE_VALUE = 7;


      public final int getNumber() {
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static FftType valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static FftType forNumber(int value) {
        switch (value) {
          case 0: return REAL;
          case 1: return IMAGINARY;
          case 2: return REAL_AND_IMAGINARY;
          case 3: return DB_MAGNITUDE;
          case 4: return MAGNITUDE_SQUARED;
          case 5: return MAGNITUDE;
          case 6: return REAL_AND_IMAGINARY_STRIP_ZEROS;
          case 7: return PHASE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<FftType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          FftType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<FftType>() {
              public FftType findValueByNumber(int number) {
                return FftType.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return greco.Fft.FftParams.getDescriptor().getEnumTypes().get(0);
      }

      private static final FftType[] VALUES = values();

      public static FftType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private FftType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:greco.FftParams.FftType)
    }

    private int bitField0_;
    public static final int INPUT_LENGTH_MS_FIELD_NUMBER = 1;
    private int inputLengthMs_;
    /**
     * <code>optional int32 input_length_ms = 1 [default = 25];</code>
     * @return Whether the inputLengthMs field is set.
     */
    @java.lang.Override
    public boolean hasInputLengthMs() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional int32 input_length_ms = 1 [default = 25];</code>
     * @return The inputLengthMs.
     */
    @java.lang.Override
    public int getInputLengthMs() {
      return inputLengthMs_;
    }

    public static final int EXPECT_REAL_AND_IMAGINARY_FIELD_NUMBER = 12;
    private boolean expectRealAndImaginary_;
    /**
     * <code>optional bool expect_real_and_imaginary = 12;</code>
     * @return Whether the expectRealAndImaginary field is set.
     */
    @java.lang.Override
    public boolean hasExpectRealAndImaginary() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>optional bool expect_real_and_imaginary = 12;</code>
     * @return The expectRealAndImaginary.
     */
    @java.lang.Override
    public boolean getExpectRealAndImaginary() {
      return expectRealAndImaginary_;
    }

    public static final int MIN_FFT_SIZE_FIELD_NUMBER = 2;
    private int minFftSize_;
    /**
     * <code>optional int32 min_fft_size = 2 [default = 512];</code>
     * @return Whether the minFftSize field is set.
     */
    @java.lang.Override
    public boolean hasMinFftSize() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>optional int32 min_fft_size = 2 [default = 512];</code>
     * @return The minFftSize.
     */
    @java.lang.Override
    public int getMinFftSize() {
      return minFftSize_;
    }

    public static final int MIN_FREQUENCY_OVERSAMPLING_RATIO_FIELD_NUMBER = 3;
    private float minFrequencyOversamplingRatio_;
    /**
     * <code>optional float min_frequency_oversampling_ratio = 3 [default = 0];</code>
     * @return Whether the minFrequencyOversamplingRatio field is set.
     */
    @java.lang.Override
    public boolean hasMinFrequencyOversamplingRatio() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>optional float min_frequency_oversampling_ratio = 3 [default = 0];</code>
     * @return The minFrequencyOversamplingRatio.
     */
    @java.lang.Override
    public float getMinFrequencyOversamplingRatio() {
      return minFrequencyOversamplingRatio_;
    }

    public static final int OUTPUT_CONVERSION_FIELD_NUMBER = 4;
    private int outputConversion_;
    /**
     * <code>optional .greco.FftParams.FftType output_conversion = 4 [default = MAGNITUDE_SQUARED];</code>
     * @return Whether the outputConversion field is set.
     */
    @java.lang.Override public boolean hasOutputConversion() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <code>optional .greco.FftParams.FftType output_conversion = 4 [default = MAGNITUDE_SQUARED];</code>
     * @return The outputConversion.
     */
    @java.lang.Override public greco.Fft.FftParams.FftType getOutputConversion() {
      @SuppressWarnings("deprecation")
      greco.Fft.FftParams.FftType result = greco.Fft.FftParams.FftType.valueOf(outputConversion_);
      return result == null ? greco.Fft.FftParams.FftType.MAGNITUDE_SQUARED : result;
    }

    public static final int FFT_OVERDRIVE_FIELD_NUMBER = 5;
    private boolean fftOverdrive_;
    /**
     * <code>optional bool fft_overdrive = 5 [default = false];</code>
     * @return Whether the fftOverdrive field is set.
     */
    @java.lang.Override
    public boolean hasFftOverdrive() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <code>optional bool fft_overdrive = 5 [default = false];</code>
     * @return The fftOverdrive.
     */
    @java.lang.Override
    public boolean getFftOverdrive() {
      return fftOverdrive_;
    }

    public static final int COMPUTE_INVERSE_FIELD_NUMBER = 6;
    private boolean computeInverse_;
    /**
     * <code>optional bool compute_inverse = 6 [default = false];</code>
     * @return Whether the computeInverse field is set.
     */
    @java.lang.Override
    public boolean hasComputeInverse() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <code>optional bool compute_inverse = 6 [default = false];</code>
     * @return The computeInverse.
     */
    @java.lang.Override
    public boolean getComputeInverse() {
      return computeInverse_;
    }

    public static final int RETURN_FULL_FRAME_FIELD_NUMBER = 7;
    private boolean returnFullFrame_;
    /**
     * <code>optional bool return_full_frame = 7 [default = false];</code>
     * @return Whether the returnFullFrame field is set.
     */
    @java.lang.Override
    public boolean hasReturnFullFrame() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <code>optional bool return_full_frame = 7 [default = false];</code>
     * @return The returnFullFrame.
     */
    @java.lang.Override
    public boolean getReturnFullFrame() {
      return returnFullFrame_;
    }

    public static final int FREQUENCY_PER_BIN_FIELD_NUMBER = 9;
    private float frequencyPerBin_;
    /**
     * <code>optional float frequency_per_bin = 9 [default = 0];</code>
     * @return Whether the frequencyPerBin field is set.
     */
    @java.lang.Override
    public boolean hasFrequencyPerBin() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <code>optional float frequency_per_bin = 9 [default = 0];</code>
     * @return The frequencyPerBin.
     */
    @java.lang.Override
    public float getFrequencyPerBin() {
      return frequencyPerBin_;
    }

    public static final int AUTO_SCALE_OUTPUT_FIELD_NUMBER = 10;
    private boolean autoScaleOutput_;
    /**
     * <code>optional bool auto_scale_output = 10 [default = false];</code>
     * @return Whether the autoScaleOutput field is set.
     */
    @java.lang.Override
    public boolean hasAutoScaleOutput() {
      return ((bitField0_ & 0x00000200) != 0);
    }
    /**
     * <code>optional bool auto_scale_output = 10 [default = false];</code>
     * @return The autoScaleOutput.
     */
    @java.lang.Override
    public boolean getAutoScaleOutput() {
      return autoScaleOutput_;
    }

    public static final int SAMPLE_RATE_OVERRIDE_FIELD_NUMBER = 11;
    private float sampleRateOverride_;
    /**
     * <code>optional float sample_rate_override = 11 [default = -1];</code>
     * @return Whether the sampleRateOverride field is set.
     */
    @java.lang.Override
    public boolean hasSampleRateOverride() {
      return ((bitField0_ & 0x00000400) != 0);
    }
    /**
     * <code>optional float sample_rate_override = 11 [default = -1];</code>
     * @return The sampleRateOverride.
     */
    @java.lang.Override
    public float getSampleRateOverride() {
      return sampleRateOverride_;
    }

    public static greco.Fft.FftParams parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static greco.Fft.FftParams parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static greco.Fft.FftParams parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static greco.Fft.FftParams parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static greco.Fft.FftParams parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static greco.Fft.FftParams parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static greco.Fft.FftParams parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static greco.Fft.FftParams parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static greco.Fft.FftParams parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static greco.Fft.FftParams parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static greco.Fft.FftParams parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static greco.Fft.FftParams parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(greco.Fft.FftParams prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code greco.FftParams}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:greco.FftParams)
        greco.Fft.FftParamsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return greco.Fft.internal_static_greco_FftParams_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return greco.Fft.internal_static_greco_FftParams_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                greco.Fft.FftParams.class, greco.Fft.FftParams.Builder.class);
      }

      // Construct using greco.Fft.FftParams.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        inputLengthMs_ = 25;
        bitField0_ = (bitField0_ & ~0x00000001);
        expectRealAndImaginary_ = false;
        bitField0_ = (bitField0_ & ~0x00000002);
        minFftSize_ = 512;
        bitField0_ = (bitField0_ & ~0x00000004);
        minFrequencyOversamplingRatio_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000008);
        outputConversion_ = 4;
        bitField0_ = (bitField0_ & ~0x00000010);
        fftOverdrive_ = false;
        bitField0_ = (bitField0_ & ~0x00000020);
        computeInverse_ = false;
        bitField0_ = (bitField0_ & ~0x00000040);
        returnFullFrame_ = false;
        bitField0_ = (bitField0_ & ~0x00000080);
        frequencyPerBin_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000100);
        autoScaleOutput_ = false;
        bitField0_ = (bitField0_ & ~0x00000200);
        sampleRateOverride_ = -1F;
        bitField0_ = (bitField0_ & ~0x00000400);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return greco.Fft.internal_static_greco_FftParams_descriptor;
      }

      @java.lang.Override
      public greco.Fft.FftParams getDefaultInstanceForType() {
        return greco.Fft.FftParams.getDefaultInstance();
      }

      @java.lang.Override
      public greco.Fft.FftParams build() {
        greco.Fft.FftParams result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public greco.Fft.FftParams buildPartial() {
        greco.Fft.FftParams result = new greco.Fft.FftParams(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          to_bitField0_ |= 0x00000001;
        }
        result.inputLengthMs_ = inputLengthMs_;
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.expectRealAndImaginary_ = expectRealAndImaginary_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          to_bitField0_ |= 0x00000004;
        }
        result.minFftSize_ = minFftSize_;
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.minFrequencyOversamplingRatio_ = minFrequencyOversamplingRatio_;
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          to_bitField0_ |= 0x00000010;
        }
        result.outputConversion_ = outputConversion_;
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.fftOverdrive_ = fftOverdrive_;
          to_bitField0_ |= 0x00000020;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.computeInverse_ = computeInverse_;
          to_bitField0_ |= 0x00000040;
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          result.returnFullFrame_ = returnFullFrame_;
          to_bitField0_ |= 0x00000080;
        }
        if (((from_bitField0_ & 0x00000100) != 0)) {
          result.frequencyPerBin_ = frequencyPerBin_;
          to_bitField0_ |= 0x00000100;
        }
        if (((from_bitField0_ & 0x00000200) != 0)) {
          result.autoScaleOutput_ = autoScaleOutput_;
          to_bitField0_ |= 0x00000200;
        }
        if (((from_bitField0_ & 0x00000400) != 0)) {
          to_bitField0_ |= 0x00000400;
        }
        result.sampleRateOverride_ = sampleRateOverride_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      private int bitField0_;

      private int inputLengthMs_ = 25;
      /**
       * <code>optional int32 input_length_ms = 1 [default = 25];</code>
       * @return Whether the inputLengthMs field is set.
       */
      @java.lang.Override
      public boolean hasInputLengthMs() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional int32 input_length_ms = 1 [default = 25];</code>
       * @return The inputLengthMs.
       */
      @java.lang.Override
      public int getInputLengthMs() {
        return inputLengthMs_;
      }
      /**
       * <code>optional int32 input_length_ms = 1 [default = 25];</code>
       * @param value The inputLengthMs to set.
       * @return This builder for chaining.
       */
      public Builder setInputLengthMs(int value) {
        bitField0_ |= 0x00000001;
        inputLengthMs_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 input_length_ms = 1 [default = 25];</code>
       * @return This builder for chaining.
       */
      public Builder clearInputLengthMs() {
        bitField0_ = (bitField0_ & ~0x00000001);
        inputLengthMs_ = 25;
        onChanged();
        return this;
      }

      private boolean expectRealAndImaginary_ ;
      /**
       * <code>optional bool expect_real_and_imaginary = 12;</code>
       * @return Whether the expectRealAndImaginary field is set.
       */
      @java.lang.Override
      public boolean hasExpectRealAndImaginary() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional bool expect_real_and_imaginary = 12;</code>
       * @return The expectRealAndImaginary.
       */
      @java.lang.Override
      public boolean getExpectRealAndImaginary() {
        return expectRealAndImaginary_;
      }
      /**
       * <code>optional bool expect_real_and_imaginary = 12;</code>
       * @param value The expectRealAndImaginary to set.
       * @return This builder for chaining.
       */
      public Builder setExpectRealAndImaginary(boolean value) {
        bitField0_ |= 0x00000002;
        expectRealAndImaginary_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool expect_real_and_imaginary = 12;</code>
       * @return This builder for chaining.
       */
      public Builder clearExpectRealAndImaginary() {
        bitField0_ = (bitField0_ & ~0x00000002);
        expectRealAndImaginary_ = false;
        onChanged();
        return this;
      }

      private int minFftSize_ = 512;
      /**
       * <code>optional int32 min_fft_size = 2 [default = 512];</code>
       * @return Whether the minFftSize field is set.
       */
      @java.lang.Override
      public boolean hasMinFftSize() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>optional int32 min_fft_size = 2 [default = 512];</code>
       * @return The minFftSize.
       */
      @java.lang.Override
      public int getMinFftSize() {
        return minFftSize_;
      }
      /**
       * <code>optional int32 min_fft_size = 2 [default = 512];</code>
       * @param value The minFftSize to set.
       * @return This builder for chaining.
       */
      public Builder setMinFftSize(int value) {
        bitField0_ |= 0x00000004;
        minFftSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 min_fft_size = 2 [default = 512];</code>
       * @return This builder for chaining.
       */
      public Builder clearMinFftSize() {
        bitField0_ = (bitField0_ & ~0x00000004);
        minFftSize_ = 512;
        onChanged();
        return this;
      }

      private float minFrequencyOversamplingRatio_ ;
      /**
       * <code>optional float min_frequency_oversampling_ratio = 3 [default = 0];</code>
       * @return Whether the minFrequencyOversamplingRatio field is set.
       */
      @java.lang.Override
      public boolean hasMinFrequencyOversamplingRatio() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>optional float min_frequency_oversampling_ratio = 3 [default = 0];</code>
       * @return The minFrequencyOversamplingRatio.
       */
      @java.lang.Override
      public float getMinFrequencyOversamplingRatio() {
        return minFrequencyOversamplingRatio_;
      }
      /**
       * <code>optional float min_frequency_oversampling_ratio = 3 [default = 0];</code>
       * @param value The minFrequencyOversamplingRatio to set.
       * @return This builder for chaining.
       */
      public Builder setMinFrequencyOversamplingRatio(float value) {
        bitField0_ |= 0x00000008;
        minFrequencyOversamplingRatio_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float min_frequency_oversampling_ratio = 3 [default = 0];</code>
       * @return This builder for chaining.
       */
      public Builder clearMinFrequencyOversamplingRatio() {
        bitField0_ = (bitField0_ & ~0x00000008);
        minFrequencyOversamplingRatio_ = 0F;
        onChanged();
        return this;
      }

      private int outputConversion_ = 4;
      /**
       * <code>optional .greco.FftParams.FftType output_conversion = 4 [default = MAGNITUDE_SQUARED];</code>
       * @return Whether the outputConversion field is set.
       */
      @java.lang.Override public boolean hasOutputConversion() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <code>optional .greco.FftParams.FftType output_conversion = 4 [default = MAGNITUDE_SQUARED];</code>
       * @return The outputConversion.
       */
      @java.lang.Override
      public greco.Fft.FftParams.FftType getOutputConversion() {
        @SuppressWarnings("deprecation")
        greco.Fft.FftParams.FftType result = greco.Fft.FftParams.FftType.valueOf(outputConversion_);
        return result == null ? greco.Fft.FftParams.FftType.MAGNITUDE_SQUARED : result;
      }
      /**
       * <code>optional .greco.FftParams.FftType output_conversion = 4 [default = MAGNITUDE_SQUARED];</code>
       * @param value The outputConversion to set.
       * @return This builder for chaining.
       */
      public Builder setOutputConversion(greco.Fft.FftParams.FftType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000010;
        outputConversion_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .greco.FftParams.FftType output_conversion = 4 [default = MAGNITUDE_SQUARED];</code>
       * @return This builder for chaining.
       */
      public Builder clearOutputConversion() {
        bitField0_ = (bitField0_ & ~0x00000010);
        outputConversion_ = 4;
        onChanged();
        return this;
      }

      private boolean fftOverdrive_ ;
      /**
       * <code>optional bool fft_overdrive = 5 [default = false];</code>
       * @return Whether the fftOverdrive field is set.
       */
      @java.lang.Override
      public boolean hasFftOverdrive() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <code>optional bool fft_overdrive = 5 [default = false];</code>
       * @return The fftOverdrive.
       */
      @java.lang.Override
      public boolean getFftOverdrive() {
        return fftOverdrive_;
      }
      /**
       * <code>optional bool fft_overdrive = 5 [default = false];</code>
       * @param value The fftOverdrive to set.
       * @return This builder for chaining.
       */
      public Builder setFftOverdrive(boolean value) {
        bitField0_ |= 0x00000020;
        fftOverdrive_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool fft_overdrive = 5 [default = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearFftOverdrive() {
        bitField0_ = (bitField0_ & ~0x00000020);
        fftOverdrive_ = false;
        onChanged();
        return this;
      }

      private boolean computeInverse_ ;
      /**
       * <code>optional bool compute_inverse = 6 [default = false];</code>
       * @return Whether the computeInverse field is set.
       */
      @java.lang.Override
      public boolean hasComputeInverse() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <code>optional bool compute_inverse = 6 [default = false];</code>
       * @return The computeInverse.
       */
      @java.lang.Override
      public boolean getComputeInverse() {
        return computeInverse_;
      }
      /**
       * <code>optional bool compute_inverse = 6 [default = false];</code>
       * @param value The computeInverse to set.
       * @return This builder for chaining.
       */
      public Builder setComputeInverse(boolean value) {
        bitField0_ |= 0x00000040;
        computeInverse_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool compute_inverse = 6 [default = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearComputeInverse() {
        bitField0_ = (bitField0_ & ~0x00000040);
        computeInverse_ = false;
        onChanged();
        return this;
      }

      private boolean returnFullFrame_ ;
      /**
       * <code>optional bool return_full_frame = 7 [default = false];</code>
       * @return Whether the returnFullFrame field is set.
       */
      @java.lang.Override
      public boolean hasReturnFullFrame() {
        return ((bitField0_ & 0x00000080) != 0);
      }
      /**
       * <code>optional bool return_full_frame = 7 [default = false];</code>
       * @return The returnFullFrame.
       */
      @java.lang.Override
      public boolean getReturnFullFrame() {
        return returnFullFrame_;
      }
      /**
       * <code>optional bool return_full_frame = 7 [default = false];</code>
       * @param value The returnFullFrame to set.
       * @return This builder for chaining.
       */
      public Builder setReturnFullFrame(boolean value) {
        bitField0_ |= 0x00000080;
        returnFullFrame_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool return_full_frame = 7 [default = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearReturnFullFrame() {
        bitField0_ = (bitField0_ & ~0x00000080);
        returnFullFrame_ = false;
        onChanged();
        return this;
      }

      private float frequencyPerBin_ ;
      /**
       * <code>optional float frequency_per_bin = 9 [default = 0];</code>
       * @return Whether the frequencyPerBin field is set.
       */
      @java.lang.Override
      public boolean hasFrequencyPerBin() {
        return ((bitField0_ & 0x00000100) != 0);
      }
      /**
       * <code>optional float frequency_per_bin = 9 [default = 0];</code>
       * @return The frequencyPerBin.
       */
      @java.lang.Override
      public float getFrequencyPerBin() {
        return frequencyPerBin_;
      }
      /**
       * <code>optional float frequency_per_bin = 9 [default = 0];</code>
       * @param value The frequencyPerBin to set.
       * @return This builder for chaining.
       */
      public Builder setFrequencyPerBin(float value) {
        bitField0_ |= 0x00000100;
        frequencyPerBin_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float frequency_per_bin = 9 [default = 0];</code>
       * @return This builder for chaining.
       */
      public Builder clearFrequencyPerBin() {
        bitField0_ = (bitField0_ & ~0x00000100);
        frequencyPerBin_ = 0F;
        onChanged();
        return this;
      }

      private boolean autoScaleOutput_ ;
      /**
       * <code>optional bool auto_scale_output = 10 [default = false];</code>
       * @return Whether the autoScaleOutput field is set.
       */
      @java.lang.Override
      public boolean hasAutoScaleOutput() {
        return ((bitField0_ & 0x00000200) != 0);
      }
      /**
       * <code>optional bool auto_scale_output = 10 [default = false];</code>
       * @return The autoScaleOutput.
       */
      @java.lang.Override
      public boolean getAutoScaleOutput() {
        return autoScaleOutput_;
      }
      /**
       * <code>optional bool auto_scale_output = 10 [default = false];</code>
       * @param value The autoScaleOutput to set.
       * @return This builder for chaining.
       */
      public Builder setAutoScaleOutput(boolean value) {
        bitField0_ |= 0x00000200;
        autoScaleOutput_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool auto_scale_output = 10 [default = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearAutoScaleOutput() {
        bitField0_ = (bitField0_ & ~0x00000200);
        autoScaleOutput_ = false;
        onChanged();
        return this;
      }

      private float sampleRateOverride_ = -1F;
      /**
       * <code>optional float sample_rate_override = 11 [default = -1];</code>
       * @return Whether the sampleRateOverride field is set.
       */
      @java.lang.Override
      public boolean hasSampleRateOverride() {
        return ((bitField0_ & 0x00000400) != 0);
      }
      /**
       * <code>optional float sample_rate_override = 11 [default = -1];</code>
       * @return The sampleRateOverride.
       */
      @java.lang.Override
      public float getSampleRateOverride() {
        return sampleRateOverride_;
      }
      /**
       * <code>optional float sample_rate_override = 11 [default = -1];</code>
       * @param value The sampleRateOverride to set.
       * @return This builder for chaining.
       */
      public Builder setSampleRateOverride(float value) {
        bitField0_ |= 0x00000400;
        sampleRateOverride_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float sample_rate_override = 11 [default = -1];</code>
       * @return This builder for chaining.
       */
      public Builder clearSampleRateOverride() {
        bitField0_ = (bitField0_ & ~0x00000400);
        sampleRateOverride_ = -1F;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:greco.FftParams)
    }

    // @@protoc_insertion_point(class_scope:greco.FftParams)
    private static final greco.Fft.FftParams DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new greco.Fft.FftParams();
    }

    public static greco.Fft.FftParams getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<FftParams>
        PARSER = new com.google.protobuf.AbstractParser<FftParams>() {
      @java.lang.Override
      public FftParams parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(
                  builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<FftParams> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<FftParams> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public greco.Fft.FftParams getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

    public static final int ID_FIELD_NUMBER = 18905514;
    /**
     * <code>extend .greco.Params { ... }</code>
     */
    public static final
      com.google.protobuf.GeneratedMessage.GeneratedExtension<
        greco.ParamsProto.Params,
        greco.Fft.FftParams> id = com.google.protobuf.GeneratedMessage
            .newMessageScopedGeneratedExtension(
          greco.Fft.FftParams.getDefaultInstance(),
          0,
          greco.Fft.FftParams.class,
          greco.Fft.FftParams.getDefaultInstance());
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_greco_FftParams_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_greco_FftParams_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n speech/greco3/frontend/fft.proto\022\005grec" +
      "o\032\037speech/greco3/core/params.proto\"\361\004\n\tF" +
      "ftParams\022\033\n\017input_length_ms\030\001 \001(\005:\00225\022!\n" +
      "\031expect_real_and_imaginary\030\014 \001(\010\022\031\n\014min_" +
      "fft_size\030\002 \001(\005:\003512\022+\n min_frequency_ove" +
      "rsampling_ratio\030\003 \001(\002:\0010\022F\n\021output_conve" +
      "rsion\030\004 \001(\0162\030.greco.FftParams.FftType:\021M" +
      "AGNITUDE_SQUARED\022\034\n\rfft_overdrive\030\005 \001(\010:" +
      "\005false\022\036\n\017compute_inverse\030\006 \001(\010:\005false\022 " +
      "\n\021return_full_frame\030\007 \001(\010:\005false\022\034\n\021freq" +
      "uency_per_bin\030\t \001(\002:\0010\022 \n\021auto_scale_out" +
      "put\030\n \001(\010:\005false\022 \n\024sample_rate_override" +
      "\030\013 \001(\002:\002-1\"\241\001\n\007FftType\022\010\n\004REAL\020\000\022\r\n\tIMAG" +
      "INARY\020\001\022\026\n\022REAL_AND_IMAGINARY\020\002\022\020\n\014DB_MA" +
      "GNITUDE\020\003\022\025\n\021MAGNITUDE_SQUARED\020\004\022\r\n\tMAGN" +
      "ITUDE\020\005\022\"\n\036REAL_AND_IMAGINARY_STRIP_ZERO" +
      "S\020\006\022\t\n\005PHASE\020\0072.\n\002id\022\r.greco.Params\030\252\363\201\t" +
      " \001(\0132\020.greco.FftParamsB\010H\002\242\002\003GRC"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          greco.ParamsProto.getDescriptor(),
        });
    internal_static_greco_FftParams_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_greco_FftParams_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_greco_FftParams_descriptor,
        new java.lang.String[] { "InputLengthMs", "ExpectRealAndImaginary", "MinFftSize", "MinFrequencyOversamplingRatio", "OutputConversion", "FftOverdrive", "ComputeInverse", "ReturnFullFrame", "FrequencyPerBin", "AutoScaleOutput", "SampleRateOverride", });
    greco.ParamsProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
