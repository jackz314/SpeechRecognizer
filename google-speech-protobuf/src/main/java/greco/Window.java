// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speech/greco3/frontend/window.proto

package greco;

public final class Window {
  private Window() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
    registry.add(greco.Window.WindowParams.id);
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface WindowParamsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:greco.WindowParams)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional float preemphasis = 1 [default = 0.97];</code>
     * @return Whether the preemphasis field is set.
     */
    boolean hasPreemphasis();
    /**
     * <code>optional float preemphasis = 1 [default = 0.97];</code>
     * @return The preemphasis.
     */
    float getPreemphasis();

    /**
     * <code>optional bool preemphasis_compatibility = 2 [default = false];</code>
     * @return Whether the preemphasisCompatibility field is set.
     */
    boolean hasPreemphasisCompatibility();
    /**
     * <code>optional bool preemphasis_compatibility = 2 [default = false];</code>
     * @return The preemphasisCompatibility.
     */
    boolean getPreemphasisCompatibility();

    /**
     * <code>optional .greco.WindowParams.WindowType window_type = 3 [default = HAMMING];</code>
     * @return Whether the windowType field is set.
     */
    boolean hasWindowType();
    /**
     * <code>optional .greco.WindowParams.WindowType window_type = 3 [default = HAMMING];</code>
     * @return The windowType.
     */
    greco.Window.WindowParams.WindowType getWindowType();

    /**
     * <code>optional float beta_kaiser = 4 [default = 0.6];</code>
     * @return Whether the betaKaiser field is set.
     */
    boolean hasBetaKaiser();
    /**
     * <code>optional float beta_kaiser = 4 [default = 0.6];</code>
     * @return The betaKaiser.
     */
    float getBetaKaiser();

    /**
     * <code>optional bool htk_preemphasis_compatibility = 5 [default = true];</code>
     * @return Whether the htkPreemphasisCompatibility field is set.
     */
    boolean hasHtkPreemphasisCompatibility();
    /**
     * <code>optional bool htk_preemphasis_compatibility = 5 [default = true];</code>
     * @return The htkPreemphasisCompatibility.
     */
    boolean getHtkPreemphasisCompatibility();

    /**
     * <code>optional float noise_scale = 6 [default = 0];</code>
     * @return Whether the noiseScale field is set.
     */
    boolean hasNoiseScale();
    /**
     * <code>optional float noise_scale = 6 [default = 0];</code>
     * @return The noiseScale.
     */
    float getNoiseScale();

    /**
     * <code>optional bool normalize_window = 7 [default = false];</code>
     * @return Whether the normalizeWindow field is set.
     */
    boolean hasNormalizeWindow();
    /**
     * <code>optional bool normalize_window = 7 [default = false];</code>
     * @return The normalizeWindow.
     */
    boolean getNormalizeWindow();

    /**
     * <code>optional float window_size_ms = 8 [default = 25];</code>
     * @return Whether the windowSizeMs field is set.
     */
    boolean hasWindowSizeMs();
    /**
     * <code>optional float window_size_ms = 8 [default = 25];</code>
     * @return The windowSizeMs.
     */
    float getWindowSizeMs();

    /**
     * <code>optional float zeros_threshold_for_noise_adding = 9 [default = 0];</code>
     * @return Whether the zerosThresholdForNoiseAdding field is set.
     */
    boolean hasZerosThresholdForNoiseAdding();
    /**
     * <code>optional float zeros_threshold_for_noise_adding = 9 [default = 0];</code>
     * @return The zerosThresholdForNoiseAdding.
     */
    float getZerosThresholdForNoiseAdding();

    /**
     * <code>optional float sample_rate_override = 10 [default = -1];</code>
     * @return Whether the sampleRateOverride field is set.
     */
    boolean hasSampleRateOverride();
    /**
     * <code>optional float sample_rate_override = 10 [default = -1];</code>
     * @return The sampleRateOverride.
     */
    float getSampleRateOverride();

    /**
     * <code>repeated float random_numbers = 11 [packed = true];</code>
     * @return A list containing the randomNumbers.
     */
    java.util.List<java.lang.Float> getRandomNumbersList();
    /**
     * <code>repeated float random_numbers = 11 [packed = true];</code>
     * @return The count of randomNumbers.
     */
    int getRandomNumbersCount();
    /**
     * <code>repeated float random_numbers = 11 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The randomNumbers at the given index.
     */
    float getRandomNumbers(int index);
  }
  /**
   * Protobuf type {@code greco.WindowParams}
   */
  public static final class WindowParams extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:greco.WindowParams)
      WindowParamsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use WindowParams.newBuilder() to construct.
    private WindowParams(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private WindowParams() {
      preemphasis_ = 0.97F;
      windowType_ = 2;
      betaKaiser_ = 0.6F;
      htkPreemphasisCompatibility_ = true;
      windowSizeMs_ = 25F;
      sampleRateOverride_ = -1F;
      randomNumbers_ = emptyFloatList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new WindowParams();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return greco.Window.internal_static_greco_WindowParams_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return greco.Window.internal_static_greco_WindowParams_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              greco.Window.WindowParams.class, greco.Window.WindowParams.Builder.class);
    }

    /**
     * Protobuf enum {@code greco.WindowParams.WindowType}
     */
    public enum WindowType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>HANNING = 1;</code>
       */
      HANNING(1),
      /**
       * <code>HAMMING = 2;</code>
       */
      HAMMING(2),
      /**
       * <code>HANNING2 = 3;</code>
       */
      HANNING2(3),
      /**
       * <code>HANNING3 = 4;</code>
       */
      HANNING3(4),
      /**
       * <code>KAISER = 5;</code>
       */
      KAISER(5),
      /**
       * <code>RECTANGULAR = 6;</code>
       */
      RECTANGULAR(6),
      /**
       * <code>BLACKMAN = 7;</code>
       */
      BLACKMAN(7),
      /**
       * <code>BLACKMANNUTTALL = 8;</code>
       */
      BLACKMANNUTTALL(8),
      /**
       * <code>BARTLETT = 9;</code>
       */
      BARTLETT(9),
      /**
       * <code>HANNING_DSP = 10;</code>
       */
      HANNING_DSP(10),
      /**
       * <code>HAMMING_DSP = 11;</code>
       */
      HAMMING_DSP(11),
      /**
       * <code>SQRT_HAMMING = 12;</code>
       */
      SQRT_HAMMING(12),
      /**
       * <code>KAISER_BESSEL_DERIVED = 13;</code>
       */
      KAISER_BESSEL_DERIVED(13),
      /**
       * <code>SQRT_HANN = 14;</code>
       */
      SQRT_HANN(14),
      /**
       * <code>MICRO_SQRT_HANNING = 15;</code>
       */
      MICRO_SQRT_HANNING(15),
      ;

      /**
       * <code>HANNING = 1;</code>
       */
      public static final int HANNING_VALUE = 1;
      /**
       * <code>HAMMING = 2;</code>
       */
      public static final int HAMMING_VALUE = 2;
      /**
       * <code>HANNING2 = 3;</code>
       */
      public static final int HANNING2_VALUE = 3;
      /**
       * <code>HANNING3 = 4;</code>
       */
      public static final int HANNING3_VALUE = 4;
      /**
       * <code>KAISER = 5;</code>
       */
      public static final int KAISER_VALUE = 5;
      /**
       * <code>RECTANGULAR = 6;</code>
       */
      public static final int RECTANGULAR_VALUE = 6;
      /**
       * <code>BLACKMAN = 7;</code>
       */
      public static final int BLACKMAN_VALUE = 7;
      /**
       * <code>BLACKMANNUTTALL = 8;</code>
       */
      public static final int BLACKMANNUTTALL_VALUE = 8;
      /**
       * <code>BARTLETT = 9;</code>
       */
      public static final int BARTLETT_VALUE = 9;
      /**
       * <code>HANNING_DSP = 10;</code>
       */
      public static final int HANNING_DSP_VALUE = 10;
      /**
       * <code>HAMMING_DSP = 11;</code>
       */
      public static final int HAMMING_DSP_VALUE = 11;
      /**
       * <code>SQRT_HAMMING = 12;</code>
       */
      public static final int SQRT_HAMMING_VALUE = 12;
      /**
       * <code>KAISER_BESSEL_DERIVED = 13;</code>
       */
      public static final int KAISER_BESSEL_DERIVED_VALUE = 13;
      /**
       * <code>SQRT_HANN = 14;</code>
       */
      public static final int SQRT_HANN_VALUE = 14;
      /**
       * <code>MICRO_SQRT_HANNING = 15;</code>
       */
      public static final int MICRO_SQRT_HANNING_VALUE = 15;


      public final int getNumber() {
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static WindowType valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static WindowType forNumber(int value) {
        switch (value) {
          case 1: return HANNING;
          case 2: return HAMMING;
          case 3: return HANNING2;
          case 4: return HANNING3;
          case 5: return KAISER;
          case 6: return RECTANGULAR;
          case 7: return BLACKMAN;
          case 8: return BLACKMANNUTTALL;
          case 9: return BARTLETT;
          case 10: return HANNING_DSP;
          case 11: return HAMMING_DSP;
          case 12: return SQRT_HAMMING;
          case 13: return KAISER_BESSEL_DERIVED;
          case 14: return SQRT_HANN;
          case 15: return MICRO_SQRT_HANNING;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<WindowType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          WindowType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<WindowType>() {
              public WindowType findValueByNumber(int number) {
                return WindowType.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return greco.Window.WindowParams.getDescriptor().getEnumTypes().get(0);
      }

      private static final WindowType[] VALUES = values();

      public static WindowType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private WindowType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:greco.WindowParams.WindowType)
    }

    private int bitField0_;
    public static final int PREEMPHASIS_FIELD_NUMBER = 1;
    private float preemphasis_;
    /**
     * <code>optional float preemphasis = 1 [default = 0.97];</code>
     * @return Whether the preemphasis field is set.
     */
    @java.lang.Override
    public boolean hasPreemphasis() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional float preemphasis = 1 [default = 0.97];</code>
     * @return The preemphasis.
     */
    @java.lang.Override
    public float getPreemphasis() {
      return preemphasis_;
    }

    public static final int PREEMPHASIS_COMPATIBILITY_FIELD_NUMBER = 2;
    private boolean preemphasisCompatibility_;
    /**
     * <code>optional bool preemphasis_compatibility = 2 [default = false];</code>
     * @return Whether the preemphasisCompatibility field is set.
     */
    @java.lang.Override
    public boolean hasPreemphasisCompatibility() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>optional bool preemphasis_compatibility = 2 [default = false];</code>
     * @return The preemphasisCompatibility.
     */
    @java.lang.Override
    public boolean getPreemphasisCompatibility() {
      return preemphasisCompatibility_;
    }

    public static final int WINDOW_TYPE_FIELD_NUMBER = 3;
    private int windowType_;
    /**
     * <code>optional .greco.WindowParams.WindowType window_type = 3 [default = HAMMING];</code>
     * @return Whether the windowType field is set.
     */
    @java.lang.Override public boolean hasWindowType() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>optional .greco.WindowParams.WindowType window_type = 3 [default = HAMMING];</code>
     * @return The windowType.
     */
    @java.lang.Override public greco.Window.WindowParams.WindowType getWindowType() {
      @SuppressWarnings("deprecation")
      greco.Window.WindowParams.WindowType result = greco.Window.WindowParams.WindowType.valueOf(windowType_);
      return result == null ? greco.Window.WindowParams.WindowType.HAMMING : result;
    }

    public static final int BETA_KAISER_FIELD_NUMBER = 4;
    private float betaKaiser_;
    /**
     * <code>optional float beta_kaiser = 4 [default = 0.6];</code>
     * @return Whether the betaKaiser field is set.
     */
    @java.lang.Override
    public boolean hasBetaKaiser() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>optional float beta_kaiser = 4 [default = 0.6];</code>
     * @return The betaKaiser.
     */
    @java.lang.Override
    public float getBetaKaiser() {
      return betaKaiser_;
    }

    public static final int HTK_PREEMPHASIS_COMPATIBILITY_FIELD_NUMBER = 5;
    private boolean htkPreemphasisCompatibility_;
    /**
     * <code>optional bool htk_preemphasis_compatibility = 5 [default = true];</code>
     * @return Whether the htkPreemphasisCompatibility field is set.
     */
    @java.lang.Override
    public boolean hasHtkPreemphasisCompatibility() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <code>optional bool htk_preemphasis_compatibility = 5 [default = true];</code>
     * @return The htkPreemphasisCompatibility.
     */
    @java.lang.Override
    public boolean getHtkPreemphasisCompatibility() {
      return htkPreemphasisCompatibility_;
    }

    public static final int NOISE_SCALE_FIELD_NUMBER = 6;
    private float noiseScale_;
    /**
     * <code>optional float noise_scale = 6 [default = 0];</code>
     * @return Whether the noiseScale field is set.
     */
    @java.lang.Override
    public boolean hasNoiseScale() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <code>optional float noise_scale = 6 [default = 0];</code>
     * @return The noiseScale.
     */
    @java.lang.Override
    public float getNoiseScale() {
      return noiseScale_;
    }

    public static final int NORMALIZE_WINDOW_FIELD_NUMBER = 7;
    private boolean normalizeWindow_;
    /**
     * <code>optional bool normalize_window = 7 [default = false];</code>
     * @return Whether the normalizeWindow field is set.
     */
    @java.lang.Override
    public boolean hasNormalizeWindow() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <code>optional bool normalize_window = 7 [default = false];</code>
     * @return The normalizeWindow.
     */
    @java.lang.Override
    public boolean getNormalizeWindow() {
      return normalizeWindow_;
    }

    public static final int WINDOW_SIZE_MS_FIELD_NUMBER = 8;
    private float windowSizeMs_;
    /**
     * <code>optional float window_size_ms = 8 [default = 25];</code>
     * @return Whether the windowSizeMs field is set.
     */
    @java.lang.Override
    public boolean hasWindowSizeMs() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <code>optional float window_size_ms = 8 [default = 25];</code>
     * @return The windowSizeMs.
     */
    @java.lang.Override
    public float getWindowSizeMs() {
      return windowSizeMs_;
    }

    public static final int ZEROS_THRESHOLD_FOR_NOISE_ADDING_FIELD_NUMBER = 9;
    private float zerosThresholdForNoiseAdding_;
    /**
     * <code>optional float zeros_threshold_for_noise_adding = 9 [default = 0];</code>
     * @return Whether the zerosThresholdForNoiseAdding field is set.
     */
    @java.lang.Override
    public boolean hasZerosThresholdForNoiseAdding() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <code>optional float zeros_threshold_for_noise_adding = 9 [default = 0];</code>
     * @return The zerosThresholdForNoiseAdding.
     */
    @java.lang.Override
    public float getZerosThresholdForNoiseAdding() {
      return zerosThresholdForNoiseAdding_;
    }

    public static final int SAMPLE_RATE_OVERRIDE_FIELD_NUMBER = 10;
    private float sampleRateOverride_;
    /**
     * <code>optional float sample_rate_override = 10 [default = -1];</code>
     * @return Whether the sampleRateOverride field is set.
     */
    @java.lang.Override
    public boolean hasSampleRateOverride() {
      return ((bitField0_ & 0x00000200) != 0);
    }
    /**
     * <code>optional float sample_rate_override = 10 [default = -1];</code>
     * @return The sampleRateOverride.
     */
    @java.lang.Override
    public float getSampleRateOverride() {
      return sampleRateOverride_;
    }

    public static final int RANDOM_NUMBERS_FIELD_NUMBER = 11;
    private com.google.protobuf.Internal.FloatList randomNumbers_;
    /**
     * <code>repeated float random_numbers = 11 [packed = true];</code>
     * @return A list containing the randomNumbers.
     */
    @java.lang.Override
    public java.util.List<java.lang.Float>
        getRandomNumbersList() {
      return randomNumbers_;
    }
    /**
     * <code>repeated float random_numbers = 11 [packed = true];</code>
     * @return The count of randomNumbers.
     */
    public int getRandomNumbersCount() {
      return randomNumbers_.size();
    }
    /**
     * <code>repeated float random_numbers = 11 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The randomNumbers at the given index.
     */
    public float getRandomNumbers(int index) {
      return randomNumbers_.getFloat(index);
    }
    private int randomNumbersMemoizedSerializedSize = -1;

    public static greco.Window.WindowParams parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static greco.Window.WindowParams parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static greco.Window.WindowParams parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static greco.Window.WindowParams parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static greco.Window.WindowParams parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static greco.Window.WindowParams parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static greco.Window.WindowParams parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static greco.Window.WindowParams parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static greco.Window.WindowParams parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static greco.Window.WindowParams parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static greco.Window.WindowParams parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static greco.Window.WindowParams parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(greco.Window.WindowParams prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code greco.WindowParams}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:greco.WindowParams)
        greco.Window.WindowParamsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return greco.Window.internal_static_greco_WindowParams_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return greco.Window.internal_static_greco_WindowParams_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                greco.Window.WindowParams.class, greco.Window.WindowParams.Builder.class);
      }

      // Construct using greco.Window.WindowParams.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        preemphasis_ = 0.97F;
        bitField0_ = (bitField0_ & ~0x00000001);
        preemphasisCompatibility_ = false;
        bitField0_ = (bitField0_ & ~0x00000002);
        windowType_ = 2;
        bitField0_ = (bitField0_ & ~0x00000004);
        betaKaiser_ = 0.6F;
        bitField0_ = (bitField0_ & ~0x00000008);
        htkPreemphasisCompatibility_ = true;
        bitField0_ = (bitField0_ & ~0x00000010);
        noiseScale_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000020);
        normalizeWindow_ = false;
        bitField0_ = (bitField0_ & ~0x00000040);
        windowSizeMs_ = 25F;
        bitField0_ = (bitField0_ & ~0x00000080);
        zerosThresholdForNoiseAdding_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000100);
        sampleRateOverride_ = -1F;
        bitField0_ = (bitField0_ & ~0x00000200);
        randomNumbers_ = emptyFloatList();
        bitField0_ = (bitField0_ & ~0x00000400);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return greco.Window.internal_static_greco_WindowParams_descriptor;
      }

      @java.lang.Override
      public greco.Window.WindowParams getDefaultInstanceForType() {
        return greco.Window.WindowParams.getDefaultInstance();
      }

      @java.lang.Override
      public greco.Window.WindowParams build() {
        greco.Window.WindowParams result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public greco.Window.WindowParams buildPartial() {
        greco.Window.WindowParams result = new greco.Window.WindowParams(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          to_bitField0_ |= 0x00000001;
        }
        result.preemphasis_ = preemphasis_;
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.preemphasisCompatibility_ = preemphasisCompatibility_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          to_bitField0_ |= 0x00000004;
        }
        result.windowType_ = windowType_;
        if (((from_bitField0_ & 0x00000008) != 0)) {
          to_bitField0_ |= 0x00000008;
        }
        result.betaKaiser_ = betaKaiser_;
        if (((from_bitField0_ & 0x00000010) != 0)) {
          to_bitField0_ |= 0x00000010;
        }
        result.htkPreemphasisCompatibility_ = htkPreemphasisCompatibility_;
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.noiseScale_ = noiseScale_;
          to_bitField0_ |= 0x00000020;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.normalizeWindow_ = normalizeWindow_;
          to_bitField0_ |= 0x00000040;
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          to_bitField0_ |= 0x00000080;
        }
        result.windowSizeMs_ = windowSizeMs_;
        if (((from_bitField0_ & 0x00000100) != 0)) {
          result.zerosThresholdForNoiseAdding_ = zerosThresholdForNoiseAdding_;
          to_bitField0_ |= 0x00000100;
        }
        if (((from_bitField0_ & 0x00000200) != 0)) {
          to_bitField0_ |= 0x00000200;
        }
        result.sampleRateOverride_ = sampleRateOverride_;
        if (((bitField0_ & 0x00000400) != 0)) {
          randomNumbers_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000400);
        }
        result.randomNumbers_ = randomNumbers_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      private int bitField0_;

      private float preemphasis_ = 0.97F;
      /**
       * <code>optional float preemphasis = 1 [default = 0.97];</code>
       * @return Whether the preemphasis field is set.
       */
      @java.lang.Override
      public boolean hasPreemphasis() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional float preemphasis = 1 [default = 0.97];</code>
       * @return The preemphasis.
       */
      @java.lang.Override
      public float getPreemphasis() {
        return preemphasis_;
      }
      /**
       * <code>optional float preemphasis = 1 [default = 0.97];</code>
       * @param value The preemphasis to set.
       * @return This builder for chaining.
       */
      public Builder setPreemphasis(float value) {
        bitField0_ |= 0x00000001;
        preemphasis_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float preemphasis = 1 [default = 0.97];</code>
       * @return This builder for chaining.
       */
      public Builder clearPreemphasis() {
        bitField0_ = (bitField0_ & ~0x00000001);
        preemphasis_ = 0.97F;
        onChanged();
        return this;
      }

      private boolean preemphasisCompatibility_ ;
      /**
       * <code>optional bool preemphasis_compatibility = 2 [default = false];</code>
       * @return Whether the preemphasisCompatibility field is set.
       */
      @java.lang.Override
      public boolean hasPreemphasisCompatibility() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional bool preemphasis_compatibility = 2 [default = false];</code>
       * @return The preemphasisCompatibility.
       */
      @java.lang.Override
      public boolean getPreemphasisCompatibility() {
        return preemphasisCompatibility_;
      }
      /**
       * <code>optional bool preemphasis_compatibility = 2 [default = false];</code>
       * @param value The preemphasisCompatibility to set.
       * @return This builder for chaining.
       */
      public Builder setPreemphasisCompatibility(boolean value) {
        bitField0_ |= 0x00000002;
        preemphasisCompatibility_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool preemphasis_compatibility = 2 [default = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearPreemphasisCompatibility() {
        bitField0_ = (bitField0_ & ~0x00000002);
        preemphasisCompatibility_ = false;
        onChanged();
        return this;
      }

      private int windowType_ = 2;
      /**
       * <code>optional .greco.WindowParams.WindowType window_type = 3 [default = HAMMING];</code>
       * @return Whether the windowType field is set.
       */
      @java.lang.Override public boolean hasWindowType() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>optional .greco.WindowParams.WindowType window_type = 3 [default = HAMMING];</code>
       * @return The windowType.
       */
      @java.lang.Override
      public greco.Window.WindowParams.WindowType getWindowType() {
        @SuppressWarnings("deprecation")
        greco.Window.WindowParams.WindowType result = greco.Window.WindowParams.WindowType.valueOf(windowType_);
        return result == null ? greco.Window.WindowParams.WindowType.HAMMING : result;
      }
      /**
       * <code>optional .greco.WindowParams.WindowType window_type = 3 [default = HAMMING];</code>
       * @param value The windowType to set.
       * @return This builder for chaining.
       */
      public Builder setWindowType(greco.Window.WindowParams.WindowType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000004;
        windowType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .greco.WindowParams.WindowType window_type = 3 [default = HAMMING];</code>
       * @return This builder for chaining.
       */
      public Builder clearWindowType() {
        bitField0_ = (bitField0_ & ~0x00000004);
        windowType_ = 2;
        onChanged();
        return this;
      }

      private float betaKaiser_ = 0.6F;
      /**
       * <code>optional float beta_kaiser = 4 [default = 0.6];</code>
       * @return Whether the betaKaiser field is set.
       */
      @java.lang.Override
      public boolean hasBetaKaiser() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>optional float beta_kaiser = 4 [default = 0.6];</code>
       * @return The betaKaiser.
       */
      @java.lang.Override
      public float getBetaKaiser() {
        return betaKaiser_;
      }
      /**
       * <code>optional float beta_kaiser = 4 [default = 0.6];</code>
       * @param value The betaKaiser to set.
       * @return This builder for chaining.
       */
      public Builder setBetaKaiser(float value) {
        bitField0_ |= 0x00000008;
        betaKaiser_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float beta_kaiser = 4 [default = 0.6];</code>
       * @return This builder for chaining.
       */
      public Builder clearBetaKaiser() {
        bitField0_ = (bitField0_ & ~0x00000008);
        betaKaiser_ = 0.6F;
        onChanged();
        return this;
      }

      private boolean htkPreemphasisCompatibility_ = true;
      /**
       * <code>optional bool htk_preemphasis_compatibility = 5 [default = true];</code>
       * @return Whether the htkPreemphasisCompatibility field is set.
       */
      @java.lang.Override
      public boolean hasHtkPreemphasisCompatibility() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <code>optional bool htk_preemphasis_compatibility = 5 [default = true];</code>
       * @return The htkPreemphasisCompatibility.
       */
      @java.lang.Override
      public boolean getHtkPreemphasisCompatibility() {
        return htkPreemphasisCompatibility_;
      }
      /**
       * <code>optional bool htk_preemphasis_compatibility = 5 [default = true];</code>
       * @param value The htkPreemphasisCompatibility to set.
       * @return This builder for chaining.
       */
      public Builder setHtkPreemphasisCompatibility(boolean value) {
        bitField0_ |= 0x00000010;
        htkPreemphasisCompatibility_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool htk_preemphasis_compatibility = 5 [default = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearHtkPreemphasisCompatibility() {
        bitField0_ = (bitField0_ & ~0x00000010);
        htkPreemphasisCompatibility_ = true;
        onChanged();
        return this;
      }

      private float noiseScale_ ;
      /**
       * <code>optional float noise_scale = 6 [default = 0];</code>
       * @return Whether the noiseScale field is set.
       */
      @java.lang.Override
      public boolean hasNoiseScale() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <code>optional float noise_scale = 6 [default = 0];</code>
       * @return The noiseScale.
       */
      @java.lang.Override
      public float getNoiseScale() {
        return noiseScale_;
      }
      /**
       * <code>optional float noise_scale = 6 [default = 0];</code>
       * @param value The noiseScale to set.
       * @return This builder for chaining.
       */
      public Builder setNoiseScale(float value) {
        bitField0_ |= 0x00000020;
        noiseScale_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float noise_scale = 6 [default = 0];</code>
       * @return This builder for chaining.
       */
      public Builder clearNoiseScale() {
        bitField0_ = (bitField0_ & ~0x00000020);
        noiseScale_ = 0F;
        onChanged();
        return this;
      }

      private boolean normalizeWindow_ ;
      /**
       * <code>optional bool normalize_window = 7 [default = false];</code>
       * @return Whether the normalizeWindow field is set.
       */
      @java.lang.Override
      public boolean hasNormalizeWindow() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <code>optional bool normalize_window = 7 [default = false];</code>
       * @return The normalizeWindow.
       */
      @java.lang.Override
      public boolean getNormalizeWindow() {
        return normalizeWindow_;
      }
      /**
       * <code>optional bool normalize_window = 7 [default = false];</code>
       * @param value The normalizeWindow to set.
       * @return This builder for chaining.
       */
      public Builder setNormalizeWindow(boolean value) {
        bitField0_ |= 0x00000040;
        normalizeWindow_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool normalize_window = 7 [default = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearNormalizeWindow() {
        bitField0_ = (bitField0_ & ~0x00000040);
        normalizeWindow_ = false;
        onChanged();
        return this;
      }

      private float windowSizeMs_ = 25F;
      /**
       * <code>optional float window_size_ms = 8 [default = 25];</code>
       * @return Whether the windowSizeMs field is set.
       */
      @java.lang.Override
      public boolean hasWindowSizeMs() {
        return ((bitField0_ & 0x00000080) != 0);
      }
      /**
       * <code>optional float window_size_ms = 8 [default = 25];</code>
       * @return The windowSizeMs.
       */
      @java.lang.Override
      public float getWindowSizeMs() {
        return windowSizeMs_;
      }
      /**
       * <code>optional float window_size_ms = 8 [default = 25];</code>
       * @param value The windowSizeMs to set.
       * @return This builder for chaining.
       */
      public Builder setWindowSizeMs(float value) {
        bitField0_ |= 0x00000080;
        windowSizeMs_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float window_size_ms = 8 [default = 25];</code>
       * @return This builder for chaining.
       */
      public Builder clearWindowSizeMs() {
        bitField0_ = (bitField0_ & ~0x00000080);
        windowSizeMs_ = 25F;
        onChanged();
        return this;
      }

      private float zerosThresholdForNoiseAdding_ ;
      /**
       * <code>optional float zeros_threshold_for_noise_adding = 9 [default = 0];</code>
       * @return Whether the zerosThresholdForNoiseAdding field is set.
       */
      @java.lang.Override
      public boolean hasZerosThresholdForNoiseAdding() {
        return ((bitField0_ & 0x00000100) != 0);
      }
      /**
       * <code>optional float zeros_threshold_for_noise_adding = 9 [default = 0];</code>
       * @return The zerosThresholdForNoiseAdding.
       */
      @java.lang.Override
      public float getZerosThresholdForNoiseAdding() {
        return zerosThresholdForNoiseAdding_;
      }
      /**
       * <code>optional float zeros_threshold_for_noise_adding = 9 [default = 0];</code>
       * @param value The zerosThresholdForNoiseAdding to set.
       * @return This builder for chaining.
       */
      public Builder setZerosThresholdForNoiseAdding(float value) {
        bitField0_ |= 0x00000100;
        zerosThresholdForNoiseAdding_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float zeros_threshold_for_noise_adding = 9 [default = 0];</code>
       * @return This builder for chaining.
       */
      public Builder clearZerosThresholdForNoiseAdding() {
        bitField0_ = (bitField0_ & ~0x00000100);
        zerosThresholdForNoiseAdding_ = 0F;
        onChanged();
        return this;
      }

      private float sampleRateOverride_ = -1F;
      /**
       * <code>optional float sample_rate_override = 10 [default = -1];</code>
       * @return Whether the sampleRateOverride field is set.
       */
      @java.lang.Override
      public boolean hasSampleRateOverride() {
        return ((bitField0_ & 0x00000200) != 0);
      }
      /**
       * <code>optional float sample_rate_override = 10 [default = -1];</code>
       * @return The sampleRateOverride.
       */
      @java.lang.Override
      public float getSampleRateOverride() {
        return sampleRateOverride_;
      }
      /**
       * <code>optional float sample_rate_override = 10 [default = -1];</code>
       * @param value The sampleRateOverride to set.
       * @return This builder for chaining.
       */
      public Builder setSampleRateOverride(float value) {
        bitField0_ |= 0x00000200;
        sampleRateOverride_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float sample_rate_override = 10 [default = -1];</code>
       * @return This builder for chaining.
       */
      public Builder clearSampleRateOverride() {
        bitField0_ = (bitField0_ & ~0x00000200);
        sampleRateOverride_ = -1F;
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.FloatList randomNumbers_ = emptyFloatList();
      private void ensureRandomNumbersIsMutable() {
        if (!((bitField0_ & 0x00000400) != 0)) {
          randomNumbers_ = mutableCopy(randomNumbers_);
          bitField0_ |= 0x00000400;
         }
      }
      /**
       * <code>repeated float random_numbers = 11 [packed = true];</code>
       * @return A list containing the randomNumbers.
       */
      public java.util.List<java.lang.Float>
          getRandomNumbersList() {
        return ((bitField0_ & 0x00000400) != 0) ?
                 java.util.Collections.unmodifiableList(randomNumbers_) : randomNumbers_;
      }
      /**
       * <code>repeated float random_numbers = 11 [packed = true];</code>
       * @return The count of randomNumbers.
       */
      public int getRandomNumbersCount() {
        return randomNumbers_.size();
      }
      /**
       * <code>repeated float random_numbers = 11 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The randomNumbers at the given index.
       */
      public float getRandomNumbers(int index) {
        return randomNumbers_.getFloat(index);
      }
      /**
       * <code>repeated float random_numbers = 11 [packed = true];</code>
       * @param index The index to set the value at.
       * @param value The randomNumbers to set.
       * @return This builder for chaining.
       */
      public Builder setRandomNumbers(
          int index, float value) {
        ensureRandomNumbersIsMutable();
        randomNumbers_.setFloat(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float random_numbers = 11 [packed = true];</code>
       * @param value The randomNumbers to add.
       * @return This builder for chaining.
       */
      public Builder addRandomNumbers(float value) {
        ensureRandomNumbersIsMutable();
        randomNumbers_.addFloat(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float random_numbers = 11 [packed = true];</code>
       * @param values The randomNumbers to add.
       * @return This builder for chaining.
       */
      public Builder addAllRandomNumbers(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureRandomNumbersIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, randomNumbers_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float random_numbers = 11 [packed = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearRandomNumbers() {
        randomNumbers_ = emptyFloatList();
        bitField0_ = (bitField0_ & ~0x00000400);
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:greco.WindowParams)
    }

    // @@protoc_insertion_point(class_scope:greco.WindowParams)
    private static final greco.Window.WindowParams DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new greco.Window.WindowParams();
    }

    public static greco.Window.WindowParams getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<WindowParams>
        PARSER = new com.google.protobuf.AbstractParser<WindowParams>() {
      @java.lang.Override
      public WindowParams parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(
                  builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<WindowParams> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<WindowParams> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public greco.Window.WindowParams getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

    public static final int ID_FIELD_NUMBER = 18905515;
    /**
     * <code>extend .greco.Params { ... }</code>
     */
    public static final
      com.google.protobuf.GeneratedMessage.GeneratedExtension<
        greco.ParamsProto.Params,
        greco.Window.WindowParams> id = com.google.protobuf.GeneratedMessage
            .newMessageScopedGeneratedExtension(
          greco.Window.WindowParams.getDefaultInstance(),
          0,
          greco.Window.WindowParams.class,
          greco.Window.WindowParams.getDefaultInstance());
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_greco_WindowParams_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_greco_WindowParams_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n#speech/greco3/frontend/window.proto\022\005g" +
      "reco\032\037speech/greco3/core/params.proto\"\324\005" +
      "\n\014WindowParams\022\031\n\013preemphasis\030\001 \001(\002:\0040.9" +
      "7\022(\n\031preemphasis_compatibility\030\002 \001(\010:\005fa" +
      "lse\022<\n\013window_type\030\003 \001(\0162\036.greco.WindowP" +
      "arams.WindowType:\007HAMMING\022\030\n\013beta_kaiser" +
      "\030\004 \001(\002:\0030.6\022+\n\035htk_preemphasis_compatibi" +
      "lity\030\005 \001(\010:\004true\022\026\n\013noise_scale\030\006 \001(\002:\0010" +
      "\022\037\n\020normalize_window\030\007 \001(\010:\005false\022\032\n\016win" +
      "dow_size_ms\030\010 \001(\002:\00225\022+\n zeros_threshold" +
      "_for_noise_adding\030\t \001(\002:\0010\022 \n\024sample_rat" +
      "e_override\030\n \001(\002:\002-1\022\032\n\016random_numbers\030\013" +
      " \003(\002B\002\020\001\"\206\002\n\nWindowType\022\013\n\007HANNING\020\001\022\013\n\007" +
      "HAMMING\020\002\022\014\n\010HANNING2\020\003\022\014\n\010HANNING3\020\004\022\n\n" +
      "\006KAISER\020\005\022\017\n\013RECTANGULAR\020\006\022\014\n\010BLACKMAN\020\007" +
      "\022\023\n\017BLACKMANNUTTALL\020\010\022\014\n\010BARTLETT\020\t\022\017\n\013H" +
      "ANNING_DSP\020\n\022\017\n\013HAMMING_DSP\020\013\022\020\n\014SQRT_HA" +
      "MMING\020\014\022\031\n\025KAISER_BESSEL_DERIVED\020\r\022\r\n\tSQ" +
      "RT_HANN\020\016\022\026\n\022MICRO_SQRT_HANNING\020\01721\n\002id\022" +
      "\r.greco.Params\030\253\363\201\t \001(\0132\023.greco.WindowPa" +
      "ramsB\010H\002\242\002\003GRC"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          greco.ParamsProto.getDescriptor(),
        });
    internal_static_greco_WindowParams_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_greco_WindowParams_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_greco_WindowParams_descriptor,
        new java.lang.String[] { "Preemphasis", "PreemphasisCompatibility", "WindowType", "BetaKaiser", "HtkPreemphasisCompatibility", "NoiseScale", "NormalizeWindow", "WindowSizeMs", "ZerosThresholdForNoiseAdding", "SampleRateOverride", "RandomNumbers", });
    greco.ParamsProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
