// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speech/greco3/frontend/spectral_subtractor.proto

package greco;

public final class SpectralSubtractor {
  private SpectralSubtractor() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
    registry.add(greco.SpectralSubtractor.SpectralSubtractorParams.id);
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface SpectralSubtractorParamsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:greco.SpectralSubtractorParams)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional bool auto_input_size = 1 [default = true];</code>
     * @return Whether the autoInputSize field is set.
     */
    boolean hasAutoInputSize();
    /**
     * <code>optional bool auto_input_size = 1 [default = true];</code>
     * @return The autoInputSize.
     */
    boolean getAutoInputSize();

    /**
     * <code>optional int32 number_channels_spectra = 2 [default = 513];</code>
     * @return Whether the numberChannelsSpectra field is set.
     */
    boolean hasNumberChannelsSpectra();
    /**
     * <code>optional int32 number_channels_spectra = 2 [default = 513];</code>
     * @return The numberChannelsSpectra.
     */
    int getNumberChannelsSpectra();

    /**
     * <code>optional int32 number_spectral_vectors = 3 [default = 3];</code>
     * @return Whether the numberSpectralVectors field is set.
     */
    boolean hasNumberSpectralVectors();
    /**
     * <code>optional int32 number_spectral_vectors = 3 [default = 3];</code>
     * @return The numberSpectralVectors.
     */
    int getNumberSpectralVectors();

    /**
     * <code>optional float oversubtraction_factor = 4 [default = 0.7];</code>
     * @return Whether the oversubtractionFactor field is set.
     */
    boolean hasOversubtractionFactor();
    /**
     * <code>optional float oversubtraction_factor = 4 [default = 0.7];</code>
     * @return The oversubtractionFactor.
     */
    float getOversubtractionFactor();

    /**
     * <code>optional float noise_low_subtraction_threshold = 5 [default = 16];</code>
     * @return Whether the noiseLowSubtractionThreshold field is set.
     */
    boolean hasNoiseLowSubtractionThreshold();
    /**
     * <code>optional float noise_low_subtraction_threshold = 5 [default = 16];</code>
     * @return The noiseLowSubtractionThreshold.
     */
    float getNoiseLowSubtractionThreshold();

    /**
     * <code>optional float noise_high_subtraction_threshold = 6 [default = 70];</code>
     * @return Whether the noiseHighSubtractionThreshold field is set.
     */
    boolean hasNoiseHighSubtractionThreshold();
    /**
     * <code>optional float noise_high_subtraction_threshold = 6 [default = 70];</code>
     * @return The noiseHighSubtractionThreshold.
     */
    float getNoiseHighSubtractionThreshold();

    /**
     * <code>optional float beta_floor_scale = 7 [default = 0.2];</code>
     * @return Whether the betaFloorScale field is set.
     */
    boolean hasBetaFloorScale();
    /**
     * <code>optional float beta_floor_scale = 7 [default = 0.2];</code>
     * @return The betaFloorScale.
     */
    float getBetaFloorScale();

    /**
     * <code>optional float snr_low_subtraction_threshold = 8 [default = 10];</code>
     * @return Whether the snrLowSubtractionThreshold field is set.
     */
    boolean hasSnrLowSubtractionThreshold();
    /**
     * <code>optional float snr_low_subtraction_threshold = 8 [default = 10];</code>
     * @return The snrLowSubtractionThreshold.
     */
    float getSnrLowSubtractionThreshold();

    /**
     * <code>optional float snr_high_subtraction_threshold = 9 [default = 44];</code>
     * @return Whether the snrHighSubtractionThreshold field is set.
     */
    boolean hasSnrHighSubtractionThreshold();
    /**
     * <code>optional float snr_high_subtraction_threshold = 9 [default = 44];</code>
     * @return The snrHighSubtractionThreshold.
     */
    float getSnrHighSubtractionThreshold();

    /**
     * <code>optional float snr_low_scale = 10 [default = 1];</code>
     * @return Whether the snrLowScale field is set.
     */
    boolean hasSnrLowScale();
    /**
     * <code>optional float snr_low_scale = 10 [default = 1];</code>
     * @return The snrLowScale.
     */
    float getSnrLowScale();

    /**
     * <code>optional float snr_high_scale = 11 [default = 0];</code>
     * @return Whether the snrHighScale field is set.
     */
    boolean hasSnrHighScale();
    /**
     * <code>optional float snr_high_scale = 11 [default = 0];</code>
     * @return The snrHighScale.
     */
    float getSnrHighScale();

    /**
     * <code>optional float sample_rate_override = 12 [default = -1];</code>
     * @return Whether the sampleRateOverride field is set.
     */
    boolean hasSampleRateOverride();
    /**
     * <code>optional float sample_rate_override = 12 [default = -1];</code>
     * @return The sampleRateOverride.
     */
    float getSampleRateOverride();
  }
  /**
   * Protobuf type {@code greco.SpectralSubtractorParams}
   */
  public static final class SpectralSubtractorParams extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:greco.SpectralSubtractorParams)
      SpectralSubtractorParamsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SpectralSubtractorParams.newBuilder() to construct.
    private SpectralSubtractorParams(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SpectralSubtractorParams() {
      autoInputSize_ = true;
      numberChannelsSpectra_ = 513;
      numberSpectralVectors_ = 3;
      oversubtractionFactor_ = 0.7F;
      noiseLowSubtractionThreshold_ = 16F;
      noiseHighSubtractionThreshold_ = 70F;
      betaFloorScale_ = 0.2F;
      snrLowSubtractionThreshold_ = 10F;
      snrHighSubtractionThreshold_ = 44F;
      snrLowScale_ = 1F;
      sampleRateOverride_ = -1F;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new SpectralSubtractorParams();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return greco.SpectralSubtractor.internal_static_greco_SpectralSubtractorParams_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return greco.SpectralSubtractor.internal_static_greco_SpectralSubtractorParams_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              greco.SpectralSubtractor.SpectralSubtractorParams.class, greco.SpectralSubtractor.SpectralSubtractorParams.Builder.class);
    }

    private int bitField0_;
    public static final int AUTO_INPUT_SIZE_FIELD_NUMBER = 1;
    private boolean autoInputSize_;
    /**
     * <code>optional bool auto_input_size = 1 [default = true];</code>
     * @return Whether the autoInputSize field is set.
     */
    @java.lang.Override
    public boolean hasAutoInputSize() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional bool auto_input_size = 1 [default = true];</code>
     * @return The autoInputSize.
     */
    @java.lang.Override
    public boolean getAutoInputSize() {
      return autoInputSize_;
    }

    public static final int NUMBER_CHANNELS_SPECTRA_FIELD_NUMBER = 2;
    private int numberChannelsSpectra_;
    /**
     * <code>optional int32 number_channels_spectra = 2 [default = 513];</code>
     * @return Whether the numberChannelsSpectra field is set.
     */
    @java.lang.Override
    public boolean hasNumberChannelsSpectra() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>optional int32 number_channels_spectra = 2 [default = 513];</code>
     * @return The numberChannelsSpectra.
     */
    @java.lang.Override
    public int getNumberChannelsSpectra() {
      return numberChannelsSpectra_;
    }

    public static final int NUMBER_SPECTRAL_VECTORS_FIELD_NUMBER = 3;
    private int numberSpectralVectors_;
    /**
     * <code>optional int32 number_spectral_vectors = 3 [default = 3];</code>
     * @return Whether the numberSpectralVectors field is set.
     */
    @java.lang.Override
    public boolean hasNumberSpectralVectors() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>optional int32 number_spectral_vectors = 3 [default = 3];</code>
     * @return The numberSpectralVectors.
     */
    @java.lang.Override
    public int getNumberSpectralVectors() {
      return numberSpectralVectors_;
    }

    public static final int OVERSUBTRACTION_FACTOR_FIELD_NUMBER = 4;
    private float oversubtractionFactor_;
    /**
     * <code>optional float oversubtraction_factor = 4 [default = 0.7];</code>
     * @return Whether the oversubtractionFactor field is set.
     */
    @java.lang.Override
    public boolean hasOversubtractionFactor() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>optional float oversubtraction_factor = 4 [default = 0.7];</code>
     * @return The oversubtractionFactor.
     */
    @java.lang.Override
    public float getOversubtractionFactor() {
      return oversubtractionFactor_;
    }

    public static final int NOISE_LOW_SUBTRACTION_THRESHOLD_FIELD_NUMBER = 5;
    private float noiseLowSubtractionThreshold_;
    /**
     * <code>optional float noise_low_subtraction_threshold = 5 [default = 16];</code>
     * @return Whether the noiseLowSubtractionThreshold field is set.
     */
    @java.lang.Override
    public boolean hasNoiseLowSubtractionThreshold() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <code>optional float noise_low_subtraction_threshold = 5 [default = 16];</code>
     * @return The noiseLowSubtractionThreshold.
     */
    @java.lang.Override
    public float getNoiseLowSubtractionThreshold() {
      return noiseLowSubtractionThreshold_;
    }

    public static final int NOISE_HIGH_SUBTRACTION_THRESHOLD_FIELD_NUMBER = 6;
    private float noiseHighSubtractionThreshold_;
    /**
     * <code>optional float noise_high_subtraction_threshold = 6 [default = 70];</code>
     * @return Whether the noiseHighSubtractionThreshold field is set.
     */
    @java.lang.Override
    public boolean hasNoiseHighSubtractionThreshold() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <code>optional float noise_high_subtraction_threshold = 6 [default = 70];</code>
     * @return The noiseHighSubtractionThreshold.
     */
    @java.lang.Override
    public float getNoiseHighSubtractionThreshold() {
      return noiseHighSubtractionThreshold_;
    }

    public static final int BETA_FLOOR_SCALE_FIELD_NUMBER = 7;
    private float betaFloorScale_;
    /**
     * <code>optional float beta_floor_scale = 7 [default = 0.2];</code>
     * @return Whether the betaFloorScale field is set.
     */
    @java.lang.Override
    public boolean hasBetaFloorScale() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <code>optional float beta_floor_scale = 7 [default = 0.2];</code>
     * @return The betaFloorScale.
     */
    @java.lang.Override
    public float getBetaFloorScale() {
      return betaFloorScale_;
    }

    public static final int SNR_LOW_SUBTRACTION_THRESHOLD_FIELD_NUMBER = 8;
    private float snrLowSubtractionThreshold_;
    /**
     * <code>optional float snr_low_subtraction_threshold = 8 [default = 10];</code>
     * @return Whether the snrLowSubtractionThreshold field is set.
     */
    @java.lang.Override
    public boolean hasSnrLowSubtractionThreshold() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <code>optional float snr_low_subtraction_threshold = 8 [default = 10];</code>
     * @return The snrLowSubtractionThreshold.
     */
    @java.lang.Override
    public float getSnrLowSubtractionThreshold() {
      return snrLowSubtractionThreshold_;
    }

    public static final int SNR_HIGH_SUBTRACTION_THRESHOLD_FIELD_NUMBER = 9;
    private float snrHighSubtractionThreshold_;
    /**
     * <code>optional float snr_high_subtraction_threshold = 9 [default = 44];</code>
     * @return Whether the snrHighSubtractionThreshold field is set.
     */
    @java.lang.Override
    public boolean hasSnrHighSubtractionThreshold() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <code>optional float snr_high_subtraction_threshold = 9 [default = 44];</code>
     * @return The snrHighSubtractionThreshold.
     */
    @java.lang.Override
    public float getSnrHighSubtractionThreshold() {
      return snrHighSubtractionThreshold_;
    }

    public static final int SNR_LOW_SCALE_FIELD_NUMBER = 10;
    private float snrLowScale_;
    /**
     * <code>optional float snr_low_scale = 10 [default = 1];</code>
     * @return Whether the snrLowScale field is set.
     */
    @java.lang.Override
    public boolean hasSnrLowScale() {
      return ((bitField0_ & 0x00000200) != 0);
    }
    /**
     * <code>optional float snr_low_scale = 10 [default = 1];</code>
     * @return The snrLowScale.
     */
    @java.lang.Override
    public float getSnrLowScale() {
      return snrLowScale_;
    }

    public static final int SNR_HIGH_SCALE_FIELD_NUMBER = 11;
    private float snrHighScale_;
    /**
     * <code>optional float snr_high_scale = 11 [default = 0];</code>
     * @return Whether the snrHighScale field is set.
     */
    @java.lang.Override
    public boolean hasSnrHighScale() {
      return ((bitField0_ & 0x00000400) != 0);
    }
    /**
     * <code>optional float snr_high_scale = 11 [default = 0];</code>
     * @return The snrHighScale.
     */
    @java.lang.Override
    public float getSnrHighScale() {
      return snrHighScale_;
    }

    public static final int SAMPLE_RATE_OVERRIDE_FIELD_NUMBER = 12;
    private float sampleRateOverride_;
    /**
     * <code>optional float sample_rate_override = 12 [default = -1];</code>
     * @return Whether the sampleRateOverride field is set.
     */
    @java.lang.Override
    public boolean hasSampleRateOverride() {
      return ((bitField0_ & 0x00000800) != 0);
    }
    /**
     * <code>optional float sample_rate_override = 12 [default = -1];</code>
     * @return The sampleRateOverride.
     */
    @java.lang.Override
    public float getSampleRateOverride() {
      return sampleRateOverride_;
    }

    public static greco.SpectralSubtractor.SpectralSubtractorParams parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static greco.SpectralSubtractor.SpectralSubtractorParams parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static greco.SpectralSubtractor.SpectralSubtractorParams parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static greco.SpectralSubtractor.SpectralSubtractorParams parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static greco.SpectralSubtractor.SpectralSubtractorParams parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static greco.SpectralSubtractor.SpectralSubtractorParams parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static greco.SpectralSubtractor.SpectralSubtractorParams parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static greco.SpectralSubtractor.SpectralSubtractorParams parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static greco.SpectralSubtractor.SpectralSubtractorParams parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static greco.SpectralSubtractor.SpectralSubtractorParams parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static greco.SpectralSubtractor.SpectralSubtractorParams parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static greco.SpectralSubtractor.SpectralSubtractorParams parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(greco.SpectralSubtractor.SpectralSubtractorParams prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code greco.SpectralSubtractorParams}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:greco.SpectralSubtractorParams)
        greco.SpectralSubtractor.SpectralSubtractorParamsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return greco.SpectralSubtractor.internal_static_greco_SpectralSubtractorParams_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return greco.SpectralSubtractor.internal_static_greco_SpectralSubtractorParams_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                greco.SpectralSubtractor.SpectralSubtractorParams.class, greco.SpectralSubtractor.SpectralSubtractorParams.Builder.class);
      }

      // Construct using greco.SpectralSubtractor.SpectralSubtractorParams.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        autoInputSize_ = true;
        bitField0_ = (bitField0_ & ~0x00000001);
        numberChannelsSpectra_ = 513;
        bitField0_ = (bitField0_ & ~0x00000002);
        numberSpectralVectors_ = 3;
        bitField0_ = (bitField0_ & ~0x00000004);
        oversubtractionFactor_ = 0.7F;
        bitField0_ = (bitField0_ & ~0x00000008);
        noiseLowSubtractionThreshold_ = 16F;
        bitField0_ = (bitField0_ & ~0x00000010);
        noiseHighSubtractionThreshold_ = 70F;
        bitField0_ = (bitField0_ & ~0x00000020);
        betaFloorScale_ = 0.2F;
        bitField0_ = (bitField0_ & ~0x00000040);
        snrLowSubtractionThreshold_ = 10F;
        bitField0_ = (bitField0_ & ~0x00000080);
        snrHighSubtractionThreshold_ = 44F;
        bitField0_ = (bitField0_ & ~0x00000100);
        snrLowScale_ = 1F;
        bitField0_ = (bitField0_ & ~0x00000200);
        snrHighScale_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000400);
        sampleRateOverride_ = -1F;
        bitField0_ = (bitField0_ & ~0x00000800);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return greco.SpectralSubtractor.internal_static_greco_SpectralSubtractorParams_descriptor;
      }

      @java.lang.Override
      public greco.SpectralSubtractor.SpectralSubtractorParams getDefaultInstanceForType() {
        return greco.SpectralSubtractor.SpectralSubtractorParams.getDefaultInstance();
      }

      @java.lang.Override
      public greco.SpectralSubtractor.SpectralSubtractorParams build() {
        greco.SpectralSubtractor.SpectralSubtractorParams result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public greco.SpectralSubtractor.SpectralSubtractorParams buildPartial() {
        greco.SpectralSubtractor.SpectralSubtractorParams result = new greco.SpectralSubtractor.SpectralSubtractorParams(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          to_bitField0_ |= 0x00000001;
        }
        result.autoInputSize_ = autoInputSize_;
        if (((from_bitField0_ & 0x00000002) != 0)) {
          to_bitField0_ |= 0x00000002;
        }
        result.numberChannelsSpectra_ = numberChannelsSpectra_;
        if (((from_bitField0_ & 0x00000004) != 0)) {
          to_bitField0_ |= 0x00000004;
        }
        result.numberSpectralVectors_ = numberSpectralVectors_;
        if (((from_bitField0_ & 0x00000008) != 0)) {
          to_bitField0_ |= 0x00000008;
        }
        result.oversubtractionFactor_ = oversubtractionFactor_;
        if (((from_bitField0_ & 0x00000010) != 0)) {
          to_bitField0_ |= 0x00000010;
        }
        result.noiseLowSubtractionThreshold_ = noiseLowSubtractionThreshold_;
        if (((from_bitField0_ & 0x00000020) != 0)) {
          to_bitField0_ |= 0x00000020;
        }
        result.noiseHighSubtractionThreshold_ = noiseHighSubtractionThreshold_;
        if (((from_bitField0_ & 0x00000040) != 0)) {
          to_bitField0_ |= 0x00000040;
        }
        result.betaFloorScale_ = betaFloorScale_;
        if (((from_bitField0_ & 0x00000080) != 0)) {
          to_bitField0_ |= 0x00000080;
        }
        result.snrLowSubtractionThreshold_ = snrLowSubtractionThreshold_;
        if (((from_bitField0_ & 0x00000100) != 0)) {
          to_bitField0_ |= 0x00000100;
        }
        result.snrHighSubtractionThreshold_ = snrHighSubtractionThreshold_;
        if (((from_bitField0_ & 0x00000200) != 0)) {
          to_bitField0_ |= 0x00000200;
        }
        result.snrLowScale_ = snrLowScale_;
        if (((from_bitField0_ & 0x00000400) != 0)) {
          result.snrHighScale_ = snrHighScale_;
          to_bitField0_ |= 0x00000400;
        }
        if (((from_bitField0_ & 0x00000800) != 0)) {
          to_bitField0_ |= 0x00000800;
        }
        result.sampleRateOverride_ = sampleRateOverride_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      private int bitField0_;

      private boolean autoInputSize_ = true;
      /**
       * <code>optional bool auto_input_size = 1 [default = true];</code>
       * @return Whether the autoInputSize field is set.
       */
      @java.lang.Override
      public boolean hasAutoInputSize() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional bool auto_input_size = 1 [default = true];</code>
       * @return The autoInputSize.
       */
      @java.lang.Override
      public boolean getAutoInputSize() {
        return autoInputSize_;
      }
      /**
       * <code>optional bool auto_input_size = 1 [default = true];</code>
       * @param value The autoInputSize to set.
       * @return This builder for chaining.
       */
      public Builder setAutoInputSize(boolean value) {
        bitField0_ |= 0x00000001;
        autoInputSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool auto_input_size = 1 [default = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearAutoInputSize() {
        bitField0_ = (bitField0_ & ~0x00000001);
        autoInputSize_ = true;
        onChanged();
        return this;
      }

      private int numberChannelsSpectra_ = 513;
      /**
       * <code>optional int32 number_channels_spectra = 2 [default = 513];</code>
       * @return Whether the numberChannelsSpectra field is set.
       */
      @java.lang.Override
      public boolean hasNumberChannelsSpectra() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional int32 number_channels_spectra = 2 [default = 513];</code>
       * @return The numberChannelsSpectra.
       */
      @java.lang.Override
      public int getNumberChannelsSpectra() {
        return numberChannelsSpectra_;
      }
      /**
       * <code>optional int32 number_channels_spectra = 2 [default = 513];</code>
       * @param value The numberChannelsSpectra to set.
       * @return This builder for chaining.
       */
      public Builder setNumberChannelsSpectra(int value) {
        bitField0_ |= 0x00000002;
        numberChannelsSpectra_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 number_channels_spectra = 2 [default = 513];</code>
       * @return This builder for chaining.
       */
      public Builder clearNumberChannelsSpectra() {
        bitField0_ = (bitField0_ & ~0x00000002);
        numberChannelsSpectra_ = 513;
        onChanged();
        return this;
      }

      private int numberSpectralVectors_ = 3;
      /**
       * <code>optional int32 number_spectral_vectors = 3 [default = 3];</code>
       * @return Whether the numberSpectralVectors field is set.
       */
      @java.lang.Override
      public boolean hasNumberSpectralVectors() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>optional int32 number_spectral_vectors = 3 [default = 3];</code>
       * @return The numberSpectralVectors.
       */
      @java.lang.Override
      public int getNumberSpectralVectors() {
        return numberSpectralVectors_;
      }
      /**
       * <code>optional int32 number_spectral_vectors = 3 [default = 3];</code>
       * @param value The numberSpectralVectors to set.
       * @return This builder for chaining.
       */
      public Builder setNumberSpectralVectors(int value) {
        bitField0_ |= 0x00000004;
        numberSpectralVectors_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 number_spectral_vectors = 3 [default = 3];</code>
       * @return This builder for chaining.
       */
      public Builder clearNumberSpectralVectors() {
        bitField0_ = (bitField0_ & ~0x00000004);
        numberSpectralVectors_ = 3;
        onChanged();
        return this;
      }

      private float oversubtractionFactor_ = 0.7F;
      /**
       * <code>optional float oversubtraction_factor = 4 [default = 0.7];</code>
       * @return Whether the oversubtractionFactor field is set.
       */
      @java.lang.Override
      public boolean hasOversubtractionFactor() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>optional float oversubtraction_factor = 4 [default = 0.7];</code>
       * @return The oversubtractionFactor.
       */
      @java.lang.Override
      public float getOversubtractionFactor() {
        return oversubtractionFactor_;
      }
      /**
       * <code>optional float oversubtraction_factor = 4 [default = 0.7];</code>
       * @param value The oversubtractionFactor to set.
       * @return This builder for chaining.
       */
      public Builder setOversubtractionFactor(float value) {
        bitField0_ |= 0x00000008;
        oversubtractionFactor_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float oversubtraction_factor = 4 [default = 0.7];</code>
       * @return This builder for chaining.
       */
      public Builder clearOversubtractionFactor() {
        bitField0_ = (bitField0_ & ~0x00000008);
        oversubtractionFactor_ = 0.7F;
        onChanged();
        return this;
      }

      private float noiseLowSubtractionThreshold_ = 16F;
      /**
       * <code>optional float noise_low_subtraction_threshold = 5 [default = 16];</code>
       * @return Whether the noiseLowSubtractionThreshold field is set.
       */
      @java.lang.Override
      public boolean hasNoiseLowSubtractionThreshold() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <code>optional float noise_low_subtraction_threshold = 5 [default = 16];</code>
       * @return The noiseLowSubtractionThreshold.
       */
      @java.lang.Override
      public float getNoiseLowSubtractionThreshold() {
        return noiseLowSubtractionThreshold_;
      }
      /**
       * <code>optional float noise_low_subtraction_threshold = 5 [default = 16];</code>
       * @param value The noiseLowSubtractionThreshold to set.
       * @return This builder for chaining.
       */
      public Builder setNoiseLowSubtractionThreshold(float value) {
        bitField0_ |= 0x00000010;
        noiseLowSubtractionThreshold_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float noise_low_subtraction_threshold = 5 [default = 16];</code>
       * @return This builder for chaining.
       */
      public Builder clearNoiseLowSubtractionThreshold() {
        bitField0_ = (bitField0_ & ~0x00000010);
        noiseLowSubtractionThreshold_ = 16F;
        onChanged();
        return this;
      }

      private float noiseHighSubtractionThreshold_ = 70F;
      /**
       * <code>optional float noise_high_subtraction_threshold = 6 [default = 70];</code>
       * @return Whether the noiseHighSubtractionThreshold field is set.
       */
      @java.lang.Override
      public boolean hasNoiseHighSubtractionThreshold() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <code>optional float noise_high_subtraction_threshold = 6 [default = 70];</code>
       * @return The noiseHighSubtractionThreshold.
       */
      @java.lang.Override
      public float getNoiseHighSubtractionThreshold() {
        return noiseHighSubtractionThreshold_;
      }
      /**
       * <code>optional float noise_high_subtraction_threshold = 6 [default = 70];</code>
       * @param value The noiseHighSubtractionThreshold to set.
       * @return This builder for chaining.
       */
      public Builder setNoiseHighSubtractionThreshold(float value) {
        bitField0_ |= 0x00000020;
        noiseHighSubtractionThreshold_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float noise_high_subtraction_threshold = 6 [default = 70];</code>
       * @return This builder for chaining.
       */
      public Builder clearNoiseHighSubtractionThreshold() {
        bitField0_ = (bitField0_ & ~0x00000020);
        noiseHighSubtractionThreshold_ = 70F;
        onChanged();
        return this;
      }

      private float betaFloorScale_ = 0.2F;
      /**
       * <code>optional float beta_floor_scale = 7 [default = 0.2];</code>
       * @return Whether the betaFloorScale field is set.
       */
      @java.lang.Override
      public boolean hasBetaFloorScale() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <code>optional float beta_floor_scale = 7 [default = 0.2];</code>
       * @return The betaFloorScale.
       */
      @java.lang.Override
      public float getBetaFloorScale() {
        return betaFloorScale_;
      }
      /**
       * <code>optional float beta_floor_scale = 7 [default = 0.2];</code>
       * @param value The betaFloorScale to set.
       * @return This builder for chaining.
       */
      public Builder setBetaFloorScale(float value) {
        bitField0_ |= 0x00000040;
        betaFloorScale_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float beta_floor_scale = 7 [default = 0.2];</code>
       * @return This builder for chaining.
       */
      public Builder clearBetaFloorScale() {
        bitField0_ = (bitField0_ & ~0x00000040);
        betaFloorScale_ = 0.2F;
        onChanged();
        return this;
      }

      private float snrLowSubtractionThreshold_ = 10F;
      /**
       * <code>optional float snr_low_subtraction_threshold = 8 [default = 10];</code>
       * @return Whether the snrLowSubtractionThreshold field is set.
       */
      @java.lang.Override
      public boolean hasSnrLowSubtractionThreshold() {
        return ((bitField0_ & 0x00000080) != 0);
      }
      /**
       * <code>optional float snr_low_subtraction_threshold = 8 [default = 10];</code>
       * @return The snrLowSubtractionThreshold.
       */
      @java.lang.Override
      public float getSnrLowSubtractionThreshold() {
        return snrLowSubtractionThreshold_;
      }
      /**
       * <code>optional float snr_low_subtraction_threshold = 8 [default = 10];</code>
       * @param value The snrLowSubtractionThreshold to set.
       * @return This builder for chaining.
       */
      public Builder setSnrLowSubtractionThreshold(float value) {
        bitField0_ |= 0x00000080;
        snrLowSubtractionThreshold_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float snr_low_subtraction_threshold = 8 [default = 10];</code>
       * @return This builder for chaining.
       */
      public Builder clearSnrLowSubtractionThreshold() {
        bitField0_ = (bitField0_ & ~0x00000080);
        snrLowSubtractionThreshold_ = 10F;
        onChanged();
        return this;
      }

      private float snrHighSubtractionThreshold_ = 44F;
      /**
       * <code>optional float snr_high_subtraction_threshold = 9 [default = 44];</code>
       * @return Whether the snrHighSubtractionThreshold field is set.
       */
      @java.lang.Override
      public boolean hasSnrHighSubtractionThreshold() {
        return ((bitField0_ & 0x00000100) != 0);
      }
      /**
       * <code>optional float snr_high_subtraction_threshold = 9 [default = 44];</code>
       * @return The snrHighSubtractionThreshold.
       */
      @java.lang.Override
      public float getSnrHighSubtractionThreshold() {
        return snrHighSubtractionThreshold_;
      }
      /**
       * <code>optional float snr_high_subtraction_threshold = 9 [default = 44];</code>
       * @param value The snrHighSubtractionThreshold to set.
       * @return This builder for chaining.
       */
      public Builder setSnrHighSubtractionThreshold(float value) {
        bitField0_ |= 0x00000100;
        snrHighSubtractionThreshold_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float snr_high_subtraction_threshold = 9 [default = 44];</code>
       * @return This builder for chaining.
       */
      public Builder clearSnrHighSubtractionThreshold() {
        bitField0_ = (bitField0_ & ~0x00000100);
        snrHighSubtractionThreshold_ = 44F;
        onChanged();
        return this;
      }

      private float snrLowScale_ = 1F;
      /**
       * <code>optional float snr_low_scale = 10 [default = 1];</code>
       * @return Whether the snrLowScale field is set.
       */
      @java.lang.Override
      public boolean hasSnrLowScale() {
        return ((bitField0_ & 0x00000200) != 0);
      }
      /**
       * <code>optional float snr_low_scale = 10 [default = 1];</code>
       * @return The snrLowScale.
       */
      @java.lang.Override
      public float getSnrLowScale() {
        return snrLowScale_;
      }
      /**
       * <code>optional float snr_low_scale = 10 [default = 1];</code>
       * @param value The snrLowScale to set.
       * @return This builder for chaining.
       */
      public Builder setSnrLowScale(float value) {
        bitField0_ |= 0x00000200;
        snrLowScale_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float snr_low_scale = 10 [default = 1];</code>
       * @return This builder for chaining.
       */
      public Builder clearSnrLowScale() {
        bitField0_ = (bitField0_ & ~0x00000200);
        snrLowScale_ = 1F;
        onChanged();
        return this;
      }

      private float snrHighScale_ ;
      /**
       * <code>optional float snr_high_scale = 11 [default = 0];</code>
       * @return Whether the snrHighScale field is set.
       */
      @java.lang.Override
      public boolean hasSnrHighScale() {
        return ((bitField0_ & 0x00000400) != 0);
      }
      /**
       * <code>optional float snr_high_scale = 11 [default = 0];</code>
       * @return The snrHighScale.
       */
      @java.lang.Override
      public float getSnrHighScale() {
        return snrHighScale_;
      }
      /**
       * <code>optional float snr_high_scale = 11 [default = 0];</code>
       * @param value The snrHighScale to set.
       * @return This builder for chaining.
       */
      public Builder setSnrHighScale(float value) {
        bitField0_ |= 0x00000400;
        snrHighScale_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float snr_high_scale = 11 [default = 0];</code>
       * @return This builder for chaining.
       */
      public Builder clearSnrHighScale() {
        bitField0_ = (bitField0_ & ~0x00000400);
        snrHighScale_ = 0F;
        onChanged();
        return this;
      }

      private float sampleRateOverride_ = -1F;
      /**
       * <code>optional float sample_rate_override = 12 [default = -1];</code>
       * @return Whether the sampleRateOverride field is set.
       */
      @java.lang.Override
      public boolean hasSampleRateOverride() {
        return ((bitField0_ & 0x00000800) != 0);
      }
      /**
       * <code>optional float sample_rate_override = 12 [default = -1];</code>
       * @return The sampleRateOverride.
       */
      @java.lang.Override
      public float getSampleRateOverride() {
        return sampleRateOverride_;
      }
      /**
       * <code>optional float sample_rate_override = 12 [default = -1];</code>
       * @param value The sampleRateOverride to set.
       * @return This builder for chaining.
       */
      public Builder setSampleRateOverride(float value) {
        bitField0_ |= 0x00000800;
        sampleRateOverride_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float sample_rate_override = 12 [default = -1];</code>
       * @return This builder for chaining.
       */
      public Builder clearSampleRateOverride() {
        bitField0_ = (bitField0_ & ~0x00000800);
        sampleRateOverride_ = -1F;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:greco.SpectralSubtractorParams)
    }

    // @@protoc_insertion_point(class_scope:greco.SpectralSubtractorParams)
    private static final greco.SpectralSubtractor.SpectralSubtractorParams DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new greco.SpectralSubtractor.SpectralSubtractorParams();
    }

    public static greco.SpectralSubtractor.SpectralSubtractorParams getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<SpectralSubtractorParams>
        PARSER = new com.google.protobuf.AbstractParser<SpectralSubtractorParams>() {
      @java.lang.Override
      public SpectralSubtractorParams parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(
                  builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<SpectralSubtractorParams> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SpectralSubtractorParams> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public greco.SpectralSubtractor.SpectralSubtractorParams getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

    public static final int ID_FIELD_NUMBER = 27202700;
    /**
     * <code>extend .greco.Params { ... }</code>
     */
    public static final
      com.google.protobuf.GeneratedMessage.GeneratedExtension<
        greco.ParamsProto.Params,
        greco.SpectralSubtractor.SpectralSubtractorParams> id = com.google.protobuf.GeneratedMessage
            .newMessageScopedGeneratedExtension(
          greco.SpectralSubtractor.SpectralSubtractorParams.getDefaultInstance(),
          0,
          greco.SpectralSubtractor.SpectralSubtractorParams.class,
          greco.SpectralSubtractor.SpectralSubtractorParams.getDefaultInstance());
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_greco_SpectralSubtractorParams_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_greco_SpectralSubtractorParams_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n0speech/greco3/frontend/spectral_subtra" +
      "ctor.proto\022\005greco\032\037speech/greco3/core/pa" +
      "rams.proto\"\217\004\n\030SpectralSubtractorParams\022" +
      "\035\n\017auto_input_size\030\001 \001(\010:\004true\022$\n\027number" +
      "_channels_spectra\030\002 \001(\005:\003513\022\"\n\027number_s" +
      "pectral_vectors\030\003 \001(\005:\0013\022#\n\026oversubtract" +
      "ion_factor\030\004 \001(\002:\0030.7\022+\n\037noise_low_subtr" +
      "action_threshold\030\005 \001(\002:\00216\022,\n noise_high" +
      "_subtraction_threshold\030\006 \001(\002:\00270\022\035\n\020beta" +
      "_floor_scale\030\007 \001(\002:\0030.2\022)\n\035snr_low_subtr" +
      "action_threshold\030\010 \001(\002:\00210\022*\n\036snr_high_s" +
      "ubtraction_threshold\030\t \001(\002:\00244\022\030\n\rsnr_lo" +
      "w_scale\030\n \001(\002:\0011\022\031\n\016snr_high_scale\030\013 \001(\002" +
      ":\0010\022 \n\024sample_rate_override\030\014 \001(\002:\002-12=\n" +
      "\002id\022\r.greco.Params\030\214\251\374\014 \001(\0132\037.greco.Spec" +
      "tralSubtractorParamsB\010H\002\242\002\003GRC"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          greco.ParamsProto.getDescriptor(),
        });
    internal_static_greco_SpectralSubtractorParams_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_greco_SpectralSubtractorParams_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_greco_SpectralSubtractorParams_descriptor,
        new java.lang.String[] { "AutoInputSize", "NumberChannelsSpectra", "NumberSpectralVectors", "OversubtractionFactor", "NoiseLowSubtractionThreshold", "NoiseHighSubtractionThreshold", "BetaFloorScale", "SnrLowSubtractionThreshold", "SnrHighSubtractionThreshold", "SnrLowScale", "SnrHighScale", "SampleRateOverride", });
    greco.ParamsProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
