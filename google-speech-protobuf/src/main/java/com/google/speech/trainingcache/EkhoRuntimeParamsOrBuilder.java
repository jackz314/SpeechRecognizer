// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speech/training_cache/proto/config.proto

package com.google.speech.trainingcache;

public interface EkhoRuntimeParamsOrBuilder extends
    // @@protoc_insertion_point(interface_extends:speech.training_cache.EkhoRuntimeParams)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>optional bool cache_fake_hotword_event = 1;</code>
   * @return Whether the cacheFakeHotwordEvent field is set.
   */
  boolean hasCacheFakeHotwordEvent();
  /**
   * <code>optional bool cache_fake_hotword_event = 1;</code>
   * @return The cacheFakeHotwordEvent.
   */
  boolean getCacheFakeHotwordEvent();

  /**
   * <code>optional bool cache_soda_event = 2;</code>
   * @return Whether the cacheSodaEvent field is set.
   */
  boolean hasCacheSodaEvent();
  /**
   * <code>optional bool cache_soda_event = 2;</code>
   * @return The cacheSodaEvent.
   */
  boolean getCacheSodaEvent();

  /**
   * <code>optional bool cache_hotword_timeout = 3;</code>
   * @return Whether the cacheHotwordTimeout field is set.
   */
  boolean hasCacheHotwordTimeout();
  /**
   * <code>optional bool cache_hotword_timeout = 3;</code>
   * @return The cacheHotwordTimeout.
   */
  boolean getCacheHotwordTimeout();

  /**
   * <code>optional bool cache_recognition = 4;</code>
   * @return Whether the cacheRecognition field is set.
   */
  boolean hasCacheRecognition();
  /**
   * <code>optional bool cache_recognition = 4;</code>
   * @return The cacheRecognition.
   */
  boolean getCacheRecognition();

  /**
   * <code>map&lt;string, float&gt; hotword_caching_thresholds = 5;</code>
   */
  int getHotwordCachingThresholdsCount();
  /**
   * <code>map&lt;string, float&gt; hotword_caching_thresholds = 5;</code>
   */
  boolean containsHotwordCachingThresholds(
      java.lang.String key);
  /**
   * Use {@link #getHotwordCachingThresholdsMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.Float>
  getHotwordCachingThresholds();
  /**
   * <code>map&lt;string, float&gt; hotword_caching_thresholds = 5;</code>
   */
  java.util.Map<java.lang.String, java.lang.Float>
  getHotwordCachingThresholdsMap();
  /**
   * <code>map&lt;string, float&gt; hotword_caching_thresholds = 5;</code>
   */

  float getHotwordCachingThresholdsOrDefault(
      java.lang.String key,
      float defaultValue);
  /**
   * <code>map&lt;string, float&gt; hotword_caching_thresholds = 5;</code>
   */

  float getHotwordCachingThresholdsOrThrow(
      java.lang.String key);
}
