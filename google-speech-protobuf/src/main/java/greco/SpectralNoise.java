// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speech/greco3/frontend/spectral_noise.proto

package greco;

public final class SpectralNoise {
  private SpectralNoise() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
    registry.add(greco.SpectralNoise.SpectralNoiseParams.id);
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface SpectralNoiseParamsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:greco.SpectralNoiseParams)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional bool auto_input_size = 1 [default = true];</code>
     * @return Whether the autoInputSize field is set.
     */
    boolean hasAutoInputSize();
    /**
     * <code>optional bool auto_input_size = 1 [default = true];</code>
     * @return The autoInputSize.
     */
    boolean getAutoInputSize();

    /**
     * <code>optional int32 input_size = 2 [default = 100];</code>
     * @return Whether the inputSize field is set.
     */
    boolean hasInputSize();
    /**
     * <code>optional int32 input_size = 2 [default = 100];</code>
     * @return The inputSize.
     */
    int getInputSize();

    /**
     * <code>optional int32 initial_buffer_num_frames = 3 [default = 20];</code>
     * @return Whether the initialBufferNumFrames field is set.
     */
    boolean hasInitialBufferNumFrames();
    /**
     * <code>optional int32 initial_buffer_num_frames = 3 [default = 20];</code>
     * @return The initialBufferNumFrames.
     */
    int getInitialBufferNumFrames();

    /**
     * <code>optional int32 num_frames_start_downsampling = 4 [default = 200];</code>
     * @return Whether the numFramesStartDownsampling field is set.
     */
    boolean hasNumFramesStartDownsampling();
    /**
     * <code>optional int32 num_frames_start_downsampling = 4 [default = 200];</code>
     * @return The numFramesStartDownsampling.
     */
    int getNumFramesStartDownsampling();

    /**
     * <code>optional int32 sample_every_n_frames = 5 [default = 2];</code>
     * @return Whether the sampleEveryNFrames field is set.
     */
    boolean hasSampleEveryNFrames();
    /**
     * <code>optional int32 sample_every_n_frames = 5 [default = 2];</code>
     * @return The sampleEveryNFrames.
     */
    int getSampleEveryNFrames();

    /**
     * <code>optional bool sample_input_randomly = 6 [default = false];</code>
     * @return Whether the sampleInputRandomly field is set.
     */
    boolean hasSampleInputRandomly();
    /**
     * <code>optional bool sample_input_randomly = 6 [default = false];</code>
     * @return The sampleInputRandomly.
     */
    boolean getSampleInputRandomly();

    /**
     * <code>optional bool reset_at_end_utterance = 7 [default = true];</code>
     * @return Whether the resetAtEndUtterance field is set.
     */
    boolean hasResetAtEndUtterance();
    /**
     * <code>optional bool reset_at_end_utterance = 7 [default = true];</code>
     * @return The resetAtEndUtterance.
     */
    boolean getResetAtEndUtterance();

    /**
     * <code>optional float noise_percentile_floor = 8 [default = 0.25];</code>
     * @return Whether the noisePercentileFloor field is set.
     */
    boolean hasNoisePercentileFloor();
    /**
     * <code>optional float noise_percentile_floor = 8 [default = 0.25];</code>
     * @return The noisePercentileFloor.
     */
    float getNoisePercentileFloor();

    /**
     * <code>optional float noise_percentile_background = 9 [default = 0.3];</code>
     * @return Whether the noisePercentileBackground field is set.
     */
    boolean hasNoisePercentileBackground();
    /**
     * <code>optional float noise_percentile_background = 9 [default = 0.3];</code>
     * @return The noisePercentileBackground.
     */
    float getNoisePercentileBackground();

    /**
     * <code>optional float noise_percentile_median = 10 [default = 0.5];</code>
     * @return Whether the noisePercentileMedian field is set.
     */
    boolean hasNoisePercentileMedian();
    /**
     * <code>optional float noise_percentile_median = 10 [default = 0.5];</code>
     * @return The noisePercentileMedian.
     */
    float getNoisePercentileMedian();

    /**
     * <code>optional float noise_percentile_peak = 11 [default = 0.95];</code>
     * @return Whether the noisePercentilePeak field is set.
     */
    boolean hasNoisePercentilePeak();
    /**
     * <code>optional float noise_percentile_peak = 11 [default = 0.95];</code>
     * @return The noisePercentilePeak.
     */
    float getNoisePercentilePeak();

    /**
     * <code>optional bool output_feature_noise_level_peak = 12 [default = true];</code>
     * @return Whether the outputFeatureNoiseLevelPeak field is set.
     */
    boolean hasOutputFeatureNoiseLevelPeak();
    /**
     * <code>optional bool output_feature_noise_level_peak = 12 [default = true];</code>
     * @return The outputFeatureNoiseLevelPeak.
     */
    boolean getOutputFeatureNoiseLevelPeak();

    /**
     * <code>optional bool output_feature_noise_level_median = 13 [default = false];</code>
     * @return Whether the outputFeatureNoiseLevelMedian field is set.
     */
    boolean hasOutputFeatureNoiseLevelMedian();
    /**
     * <code>optional bool output_feature_noise_level_median = 13 [default = false];</code>
     * @return The outputFeatureNoiseLevelMedian.
     */
    boolean getOutputFeatureNoiseLevelMedian();

    /**
     * <code>optional bool output_feature_noise_level_background = 14 [default = false];</code>
     * @return Whether the outputFeatureNoiseLevelBackground field is set.
     */
    boolean hasOutputFeatureNoiseLevelBackground();
    /**
     * <code>optional bool output_feature_noise_level_background = 14 [default = false];</code>
     * @return The outputFeatureNoiseLevelBackground.
     */
    boolean getOutputFeatureNoiseLevelBackground();

    /**
     * <code>optional bool output_feature_noise_level_floor = 15 [default = true];</code>
     * @return Whether the outputFeatureNoiseLevelFloor field is set.
     */
    boolean hasOutputFeatureNoiseLevelFloor();
    /**
     * <code>optional bool output_feature_noise_level_floor = 15 [default = true];</code>
     * @return The outputFeatureNoiseLevelFloor.
     */
    boolean getOutputFeatureNoiseLevelFloor();

    /**
     * <code>optional bool add_input_to_output = 16 [default = true];</code>
     * @return Whether the addInputToOutput field is set.
     */
    boolean hasAddInputToOutput();
    /**
     * <code>optional bool add_input_to_output = 16 [default = true];</code>
     * @return The addInputToOutput.
     */
    boolean getAddInputToOutput();

    /**
     * <code>optional float sample_rate_override = 17 [default = -1];</code>
     * @return Whether the sampleRateOverride field is set.
     */
    boolean hasSampleRateOverride();
    /**
     * <code>optional float sample_rate_override = 17 [default = -1];</code>
     * @return The sampleRateOverride.
     */
    float getSampleRateOverride();
  }
  /**
   * Protobuf type {@code greco.SpectralNoiseParams}
   */
  public static final class SpectralNoiseParams extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:greco.SpectralNoiseParams)
      SpectralNoiseParamsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SpectralNoiseParams.newBuilder() to construct.
    private SpectralNoiseParams(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SpectralNoiseParams() {
      autoInputSize_ = true;
      inputSize_ = 100;
      initialBufferNumFrames_ = 20;
      numFramesStartDownsampling_ = 200;
      sampleEveryNFrames_ = 2;
      resetAtEndUtterance_ = true;
      noisePercentileFloor_ = 0.25F;
      noisePercentileBackground_ = 0.3F;
      noisePercentileMedian_ = 0.5F;
      noisePercentilePeak_ = 0.95F;
      outputFeatureNoiseLevelPeak_ = true;
      outputFeatureNoiseLevelFloor_ = true;
      addInputToOutput_ = true;
      sampleRateOverride_ = -1F;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new SpectralNoiseParams();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return greco.SpectralNoise.internal_static_greco_SpectralNoiseParams_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return greco.SpectralNoise.internal_static_greco_SpectralNoiseParams_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              greco.SpectralNoise.SpectralNoiseParams.class, greco.SpectralNoise.SpectralNoiseParams.Builder.class);
    }

    private int bitField0_;
    public static final int AUTO_INPUT_SIZE_FIELD_NUMBER = 1;
    private boolean autoInputSize_;
    /**
     * <code>optional bool auto_input_size = 1 [default = true];</code>
     * @return Whether the autoInputSize field is set.
     */
    @java.lang.Override
    public boolean hasAutoInputSize() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional bool auto_input_size = 1 [default = true];</code>
     * @return The autoInputSize.
     */
    @java.lang.Override
    public boolean getAutoInputSize() {
      return autoInputSize_;
    }

    public static final int INPUT_SIZE_FIELD_NUMBER = 2;
    private int inputSize_;
    /**
     * <code>optional int32 input_size = 2 [default = 100];</code>
     * @return Whether the inputSize field is set.
     */
    @java.lang.Override
    public boolean hasInputSize() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>optional int32 input_size = 2 [default = 100];</code>
     * @return The inputSize.
     */
    @java.lang.Override
    public int getInputSize() {
      return inputSize_;
    }

    public static final int INITIAL_BUFFER_NUM_FRAMES_FIELD_NUMBER = 3;
    private int initialBufferNumFrames_;
    /**
     * <code>optional int32 initial_buffer_num_frames = 3 [default = 20];</code>
     * @return Whether the initialBufferNumFrames field is set.
     */
    @java.lang.Override
    public boolean hasInitialBufferNumFrames() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>optional int32 initial_buffer_num_frames = 3 [default = 20];</code>
     * @return The initialBufferNumFrames.
     */
    @java.lang.Override
    public int getInitialBufferNumFrames() {
      return initialBufferNumFrames_;
    }

    public static final int NUM_FRAMES_START_DOWNSAMPLING_FIELD_NUMBER = 4;
    private int numFramesStartDownsampling_;
    /**
     * <code>optional int32 num_frames_start_downsampling = 4 [default = 200];</code>
     * @return Whether the numFramesStartDownsampling field is set.
     */
    @java.lang.Override
    public boolean hasNumFramesStartDownsampling() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>optional int32 num_frames_start_downsampling = 4 [default = 200];</code>
     * @return The numFramesStartDownsampling.
     */
    @java.lang.Override
    public int getNumFramesStartDownsampling() {
      return numFramesStartDownsampling_;
    }

    public static final int SAMPLE_EVERY_N_FRAMES_FIELD_NUMBER = 5;
    private int sampleEveryNFrames_;
    /**
     * <code>optional int32 sample_every_n_frames = 5 [default = 2];</code>
     * @return Whether the sampleEveryNFrames field is set.
     */
    @java.lang.Override
    public boolean hasSampleEveryNFrames() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <code>optional int32 sample_every_n_frames = 5 [default = 2];</code>
     * @return The sampleEveryNFrames.
     */
    @java.lang.Override
    public int getSampleEveryNFrames() {
      return sampleEveryNFrames_;
    }

    public static final int SAMPLE_INPUT_RANDOMLY_FIELD_NUMBER = 6;
    private boolean sampleInputRandomly_;
    /**
     * <code>optional bool sample_input_randomly = 6 [default = false];</code>
     * @return Whether the sampleInputRandomly field is set.
     */
    @java.lang.Override
    public boolean hasSampleInputRandomly() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <code>optional bool sample_input_randomly = 6 [default = false];</code>
     * @return The sampleInputRandomly.
     */
    @java.lang.Override
    public boolean getSampleInputRandomly() {
      return sampleInputRandomly_;
    }

    public static final int RESET_AT_END_UTTERANCE_FIELD_NUMBER = 7;
    private boolean resetAtEndUtterance_;
    /**
     * <code>optional bool reset_at_end_utterance = 7 [default = true];</code>
     * @return Whether the resetAtEndUtterance field is set.
     */
    @java.lang.Override
    public boolean hasResetAtEndUtterance() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <code>optional bool reset_at_end_utterance = 7 [default = true];</code>
     * @return The resetAtEndUtterance.
     */
    @java.lang.Override
    public boolean getResetAtEndUtterance() {
      return resetAtEndUtterance_;
    }

    public static final int NOISE_PERCENTILE_FLOOR_FIELD_NUMBER = 8;
    private float noisePercentileFloor_;
    /**
     * <code>optional float noise_percentile_floor = 8 [default = 0.25];</code>
     * @return Whether the noisePercentileFloor field is set.
     */
    @java.lang.Override
    public boolean hasNoisePercentileFloor() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <code>optional float noise_percentile_floor = 8 [default = 0.25];</code>
     * @return The noisePercentileFloor.
     */
    @java.lang.Override
    public float getNoisePercentileFloor() {
      return noisePercentileFloor_;
    }

    public static final int NOISE_PERCENTILE_BACKGROUND_FIELD_NUMBER = 9;
    private float noisePercentileBackground_;
    /**
     * <code>optional float noise_percentile_background = 9 [default = 0.3];</code>
     * @return Whether the noisePercentileBackground field is set.
     */
    @java.lang.Override
    public boolean hasNoisePercentileBackground() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <code>optional float noise_percentile_background = 9 [default = 0.3];</code>
     * @return The noisePercentileBackground.
     */
    @java.lang.Override
    public float getNoisePercentileBackground() {
      return noisePercentileBackground_;
    }

    public static final int NOISE_PERCENTILE_MEDIAN_FIELD_NUMBER = 10;
    private float noisePercentileMedian_;
    /**
     * <code>optional float noise_percentile_median = 10 [default = 0.5];</code>
     * @return Whether the noisePercentileMedian field is set.
     */
    @java.lang.Override
    public boolean hasNoisePercentileMedian() {
      return ((bitField0_ & 0x00000200) != 0);
    }
    /**
     * <code>optional float noise_percentile_median = 10 [default = 0.5];</code>
     * @return The noisePercentileMedian.
     */
    @java.lang.Override
    public float getNoisePercentileMedian() {
      return noisePercentileMedian_;
    }

    public static final int NOISE_PERCENTILE_PEAK_FIELD_NUMBER = 11;
    private float noisePercentilePeak_;
    /**
     * <code>optional float noise_percentile_peak = 11 [default = 0.95];</code>
     * @return Whether the noisePercentilePeak field is set.
     */
    @java.lang.Override
    public boolean hasNoisePercentilePeak() {
      return ((bitField0_ & 0x00000400) != 0);
    }
    /**
     * <code>optional float noise_percentile_peak = 11 [default = 0.95];</code>
     * @return The noisePercentilePeak.
     */
    @java.lang.Override
    public float getNoisePercentilePeak() {
      return noisePercentilePeak_;
    }

    public static final int OUTPUT_FEATURE_NOISE_LEVEL_PEAK_FIELD_NUMBER = 12;
    private boolean outputFeatureNoiseLevelPeak_;
    /**
     * <code>optional bool output_feature_noise_level_peak = 12 [default = true];</code>
     * @return Whether the outputFeatureNoiseLevelPeak field is set.
     */
    @java.lang.Override
    public boolean hasOutputFeatureNoiseLevelPeak() {
      return ((bitField0_ & 0x00000800) != 0);
    }
    /**
     * <code>optional bool output_feature_noise_level_peak = 12 [default = true];</code>
     * @return The outputFeatureNoiseLevelPeak.
     */
    @java.lang.Override
    public boolean getOutputFeatureNoiseLevelPeak() {
      return outputFeatureNoiseLevelPeak_;
    }

    public static final int OUTPUT_FEATURE_NOISE_LEVEL_MEDIAN_FIELD_NUMBER = 13;
    private boolean outputFeatureNoiseLevelMedian_;
    /**
     * <code>optional bool output_feature_noise_level_median = 13 [default = false];</code>
     * @return Whether the outputFeatureNoiseLevelMedian field is set.
     */
    @java.lang.Override
    public boolean hasOutputFeatureNoiseLevelMedian() {
      return ((bitField0_ & 0x00001000) != 0);
    }
    /**
     * <code>optional bool output_feature_noise_level_median = 13 [default = false];</code>
     * @return The outputFeatureNoiseLevelMedian.
     */
    @java.lang.Override
    public boolean getOutputFeatureNoiseLevelMedian() {
      return outputFeatureNoiseLevelMedian_;
    }

    public static final int OUTPUT_FEATURE_NOISE_LEVEL_BACKGROUND_FIELD_NUMBER = 14;
    private boolean outputFeatureNoiseLevelBackground_;
    /**
     * <code>optional bool output_feature_noise_level_background = 14 [default = false];</code>
     * @return Whether the outputFeatureNoiseLevelBackground field is set.
     */
    @java.lang.Override
    public boolean hasOutputFeatureNoiseLevelBackground() {
      return ((bitField0_ & 0x00002000) != 0);
    }
    /**
     * <code>optional bool output_feature_noise_level_background = 14 [default = false];</code>
     * @return The outputFeatureNoiseLevelBackground.
     */
    @java.lang.Override
    public boolean getOutputFeatureNoiseLevelBackground() {
      return outputFeatureNoiseLevelBackground_;
    }

    public static final int OUTPUT_FEATURE_NOISE_LEVEL_FLOOR_FIELD_NUMBER = 15;
    private boolean outputFeatureNoiseLevelFloor_;
    /**
     * <code>optional bool output_feature_noise_level_floor = 15 [default = true];</code>
     * @return Whether the outputFeatureNoiseLevelFloor field is set.
     */
    @java.lang.Override
    public boolean hasOutputFeatureNoiseLevelFloor() {
      return ((bitField0_ & 0x00004000) != 0);
    }
    /**
     * <code>optional bool output_feature_noise_level_floor = 15 [default = true];</code>
     * @return The outputFeatureNoiseLevelFloor.
     */
    @java.lang.Override
    public boolean getOutputFeatureNoiseLevelFloor() {
      return outputFeatureNoiseLevelFloor_;
    }

    public static final int ADD_INPUT_TO_OUTPUT_FIELD_NUMBER = 16;
    private boolean addInputToOutput_;
    /**
     * <code>optional bool add_input_to_output = 16 [default = true];</code>
     * @return Whether the addInputToOutput field is set.
     */
    @java.lang.Override
    public boolean hasAddInputToOutput() {
      return ((bitField0_ & 0x00008000) != 0);
    }
    /**
     * <code>optional bool add_input_to_output = 16 [default = true];</code>
     * @return The addInputToOutput.
     */
    @java.lang.Override
    public boolean getAddInputToOutput() {
      return addInputToOutput_;
    }

    public static final int SAMPLE_RATE_OVERRIDE_FIELD_NUMBER = 17;
    private float sampleRateOverride_;
    /**
     * <code>optional float sample_rate_override = 17 [default = -1];</code>
     * @return Whether the sampleRateOverride field is set.
     */
    @java.lang.Override
    public boolean hasSampleRateOverride() {
      return ((bitField0_ & 0x00010000) != 0);
    }
    /**
     * <code>optional float sample_rate_override = 17 [default = -1];</code>
     * @return The sampleRateOverride.
     */
    @java.lang.Override
    public float getSampleRateOverride() {
      return sampleRateOverride_;
    }

    public static greco.SpectralNoise.SpectralNoiseParams parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static greco.SpectralNoise.SpectralNoiseParams parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static greco.SpectralNoise.SpectralNoiseParams parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static greco.SpectralNoise.SpectralNoiseParams parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static greco.SpectralNoise.SpectralNoiseParams parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static greco.SpectralNoise.SpectralNoiseParams parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static greco.SpectralNoise.SpectralNoiseParams parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static greco.SpectralNoise.SpectralNoiseParams parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static greco.SpectralNoise.SpectralNoiseParams parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static greco.SpectralNoise.SpectralNoiseParams parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static greco.SpectralNoise.SpectralNoiseParams parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static greco.SpectralNoise.SpectralNoiseParams parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(greco.SpectralNoise.SpectralNoiseParams prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code greco.SpectralNoiseParams}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:greco.SpectralNoiseParams)
        greco.SpectralNoise.SpectralNoiseParamsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return greco.SpectralNoise.internal_static_greco_SpectralNoiseParams_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return greco.SpectralNoise.internal_static_greco_SpectralNoiseParams_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                greco.SpectralNoise.SpectralNoiseParams.class, greco.SpectralNoise.SpectralNoiseParams.Builder.class);
      }

      // Construct using greco.SpectralNoise.SpectralNoiseParams.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        autoInputSize_ = true;
        bitField0_ = (bitField0_ & ~0x00000001);
        inputSize_ = 100;
        bitField0_ = (bitField0_ & ~0x00000002);
        initialBufferNumFrames_ = 20;
        bitField0_ = (bitField0_ & ~0x00000004);
        numFramesStartDownsampling_ = 200;
        bitField0_ = (bitField0_ & ~0x00000008);
        sampleEveryNFrames_ = 2;
        bitField0_ = (bitField0_ & ~0x00000010);
        sampleInputRandomly_ = false;
        bitField0_ = (bitField0_ & ~0x00000020);
        resetAtEndUtterance_ = true;
        bitField0_ = (bitField0_ & ~0x00000040);
        noisePercentileFloor_ = 0.25F;
        bitField0_ = (bitField0_ & ~0x00000080);
        noisePercentileBackground_ = 0.3F;
        bitField0_ = (bitField0_ & ~0x00000100);
        noisePercentileMedian_ = 0.5F;
        bitField0_ = (bitField0_ & ~0x00000200);
        noisePercentilePeak_ = 0.95F;
        bitField0_ = (bitField0_ & ~0x00000400);
        outputFeatureNoiseLevelPeak_ = true;
        bitField0_ = (bitField0_ & ~0x00000800);
        outputFeatureNoiseLevelMedian_ = false;
        bitField0_ = (bitField0_ & ~0x00001000);
        outputFeatureNoiseLevelBackground_ = false;
        bitField0_ = (bitField0_ & ~0x00002000);
        outputFeatureNoiseLevelFloor_ = true;
        bitField0_ = (bitField0_ & ~0x00004000);
        addInputToOutput_ = true;
        bitField0_ = (bitField0_ & ~0x00008000);
        sampleRateOverride_ = -1F;
        bitField0_ = (bitField0_ & ~0x00010000);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return greco.SpectralNoise.internal_static_greco_SpectralNoiseParams_descriptor;
      }

      @java.lang.Override
      public greco.SpectralNoise.SpectralNoiseParams getDefaultInstanceForType() {
        return greco.SpectralNoise.SpectralNoiseParams.getDefaultInstance();
      }

      @java.lang.Override
      public greco.SpectralNoise.SpectralNoiseParams build() {
        greco.SpectralNoise.SpectralNoiseParams result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public greco.SpectralNoise.SpectralNoiseParams buildPartial() {
        greco.SpectralNoise.SpectralNoiseParams result = new greco.SpectralNoise.SpectralNoiseParams(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          to_bitField0_ |= 0x00000001;
        }
        result.autoInputSize_ = autoInputSize_;
        if (((from_bitField0_ & 0x00000002) != 0)) {
          to_bitField0_ |= 0x00000002;
        }
        result.inputSize_ = inputSize_;
        if (((from_bitField0_ & 0x00000004) != 0)) {
          to_bitField0_ |= 0x00000004;
        }
        result.initialBufferNumFrames_ = initialBufferNumFrames_;
        if (((from_bitField0_ & 0x00000008) != 0)) {
          to_bitField0_ |= 0x00000008;
        }
        result.numFramesStartDownsampling_ = numFramesStartDownsampling_;
        if (((from_bitField0_ & 0x00000010) != 0)) {
          to_bitField0_ |= 0x00000010;
        }
        result.sampleEveryNFrames_ = sampleEveryNFrames_;
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.sampleInputRandomly_ = sampleInputRandomly_;
          to_bitField0_ |= 0x00000020;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          to_bitField0_ |= 0x00000040;
        }
        result.resetAtEndUtterance_ = resetAtEndUtterance_;
        if (((from_bitField0_ & 0x00000080) != 0)) {
          to_bitField0_ |= 0x00000080;
        }
        result.noisePercentileFloor_ = noisePercentileFloor_;
        if (((from_bitField0_ & 0x00000100) != 0)) {
          to_bitField0_ |= 0x00000100;
        }
        result.noisePercentileBackground_ = noisePercentileBackground_;
        if (((from_bitField0_ & 0x00000200) != 0)) {
          to_bitField0_ |= 0x00000200;
        }
        result.noisePercentileMedian_ = noisePercentileMedian_;
        if (((from_bitField0_ & 0x00000400) != 0)) {
          to_bitField0_ |= 0x00000400;
        }
        result.noisePercentilePeak_ = noisePercentilePeak_;
        if (((from_bitField0_ & 0x00000800) != 0)) {
          to_bitField0_ |= 0x00000800;
        }
        result.outputFeatureNoiseLevelPeak_ = outputFeatureNoiseLevelPeak_;
        if (((from_bitField0_ & 0x00001000) != 0)) {
          result.outputFeatureNoiseLevelMedian_ = outputFeatureNoiseLevelMedian_;
          to_bitField0_ |= 0x00001000;
        }
        if (((from_bitField0_ & 0x00002000) != 0)) {
          result.outputFeatureNoiseLevelBackground_ = outputFeatureNoiseLevelBackground_;
          to_bitField0_ |= 0x00002000;
        }
        if (((from_bitField0_ & 0x00004000) != 0)) {
          to_bitField0_ |= 0x00004000;
        }
        result.outputFeatureNoiseLevelFloor_ = outputFeatureNoiseLevelFloor_;
        if (((from_bitField0_ & 0x00008000) != 0)) {
          to_bitField0_ |= 0x00008000;
        }
        result.addInputToOutput_ = addInputToOutput_;
        if (((from_bitField0_ & 0x00010000) != 0)) {
          to_bitField0_ |= 0x00010000;
        }
        result.sampleRateOverride_ = sampleRateOverride_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      private int bitField0_;

      private boolean autoInputSize_ = true;
      /**
       * <code>optional bool auto_input_size = 1 [default = true];</code>
       * @return Whether the autoInputSize field is set.
       */
      @java.lang.Override
      public boolean hasAutoInputSize() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional bool auto_input_size = 1 [default = true];</code>
       * @return The autoInputSize.
       */
      @java.lang.Override
      public boolean getAutoInputSize() {
        return autoInputSize_;
      }
      /**
       * <code>optional bool auto_input_size = 1 [default = true];</code>
       * @param value The autoInputSize to set.
       * @return This builder for chaining.
       */
      public Builder setAutoInputSize(boolean value) {
        bitField0_ |= 0x00000001;
        autoInputSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool auto_input_size = 1 [default = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearAutoInputSize() {
        bitField0_ = (bitField0_ & ~0x00000001);
        autoInputSize_ = true;
        onChanged();
        return this;
      }

      private int inputSize_ = 100;
      /**
       * <code>optional int32 input_size = 2 [default = 100];</code>
       * @return Whether the inputSize field is set.
       */
      @java.lang.Override
      public boolean hasInputSize() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional int32 input_size = 2 [default = 100];</code>
       * @return The inputSize.
       */
      @java.lang.Override
      public int getInputSize() {
        return inputSize_;
      }
      /**
       * <code>optional int32 input_size = 2 [default = 100];</code>
       * @param value The inputSize to set.
       * @return This builder for chaining.
       */
      public Builder setInputSize(int value) {
        bitField0_ |= 0x00000002;
        inputSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 input_size = 2 [default = 100];</code>
       * @return This builder for chaining.
       */
      public Builder clearInputSize() {
        bitField0_ = (bitField0_ & ~0x00000002);
        inputSize_ = 100;
        onChanged();
        return this;
      }

      private int initialBufferNumFrames_ = 20;
      /**
       * <code>optional int32 initial_buffer_num_frames = 3 [default = 20];</code>
       * @return Whether the initialBufferNumFrames field is set.
       */
      @java.lang.Override
      public boolean hasInitialBufferNumFrames() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>optional int32 initial_buffer_num_frames = 3 [default = 20];</code>
       * @return The initialBufferNumFrames.
       */
      @java.lang.Override
      public int getInitialBufferNumFrames() {
        return initialBufferNumFrames_;
      }
      /**
       * <code>optional int32 initial_buffer_num_frames = 3 [default = 20];</code>
       * @param value The initialBufferNumFrames to set.
       * @return This builder for chaining.
       */
      public Builder setInitialBufferNumFrames(int value) {
        bitField0_ |= 0x00000004;
        initialBufferNumFrames_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 initial_buffer_num_frames = 3 [default = 20];</code>
       * @return This builder for chaining.
       */
      public Builder clearInitialBufferNumFrames() {
        bitField0_ = (bitField0_ & ~0x00000004);
        initialBufferNumFrames_ = 20;
        onChanged();
        return this;
      }

      private int numFramesStartDownsampling_ = 200;
      /**
       * <code>optional int32 num_frames_start_downsampling = 4 [default = 200];</code>
       * @return Whether the numFramesStartDownsampling field is set.
       */
      @java.lang.Override
      public boolean hasNumFramesStartDownsampling() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>optional int32 num_frames_start_downsampling = 4 [default = 200];</code>
       * @return The numFramesStartDownsampling.
       */
      @java.lang.Override
      public int getNumFramesStartDownsampling() {
        return numFramesStartDownsampling_;
      }
      /**
       * <code>optional int32 num_frames_start_downsampling = 4 [default = 200];</code>
       * @param value The numFramesStartDownsampling to set.
       * @return This builder for chaining.
       */
      public Builder setNumFramesStartDownsampling(int value) {
        bitField0_ |= 0x00000008;
        numFramesStartDownsampling_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 num_frames_start_downsampling = 4 [default = 200];</code>
       * @return This builder for chaining.
       */
      public Builder clearNumFramesStartDownsampling() {
        bitField0_ = (bitField0_ & ~0x00000008);
        numFramesStartDownsampling_ = 200;
        onChanged();
        return this;
      }

      private int sampleEveryNFrames_ = 2;
      /**
       * <code>optional int32 sample_every_n_frames = 5 [default = 2];</code>
       * @return Whether the sampleEveryNFrames field is set.
       */
      @java.lang.Override
      public boolean hasSampleEveryNFrames() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <code>optional int32 sample_every_n_frames = 5 [default = 2];</code>
       * @return The sampleEveryNFrames.
       */
      @java.lang.Override
      public int getSampleEveryNFrames() {
        return sampleEveryNFrames_;
      }
      /**
       * <code>optional int32 sample_every_n_frames = 5 [default = 2];</code>
       * @param value The sampleEveryNFrames to set.
       * @return This builder for chaining.
       */
      public Builder setSampleEveryNFrames(int value) {
        bitField0_ |= 0x00000010;
        sampleEveryNFrames_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 sample_every_n_frames = 5 [default = 2];</code>
       * @return This builder for chaining.
       */
      public Builder clearSampleEveryNFrames() {
        bitField0_ = (bitField0_ & ~0x00000010);
        sampleEveryNFrames_ = 2;
        onChanged();
        return this;
      }

      private boolean sampleInputRandomly_ ;
      /**
       * <code>optional bool sample_input_randomly = 6 [default = false];</code>
       * @return Whether the sampleInputRandomly field is set.
       */
      @java.lang.Override
      public boolean hasSampleInputRandomly() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <code>optional bool sample_input_randomly = 6 [default = false];</code>
       * @return The sampleInputRandomly.
       */
      @java.lang.Override
      public boolean getSampleInputRandomly() {
        return sampleInputRandomly_;
      }
      /**
       * <code>optional bool sample_input_randomly = 6 [default = false];</code>
       * @param value The sampleInputRandomly to set.
       * @return This builder for chaining.
       */
      public Builder setSampleInputRandomly(boolean value) {
        bitField0_ |= 0x00000020;
        sampleInputRandomly_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool sample_input_randomly = 6 [default = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearSampleInputRandomly() {
        bitField0_ = (bitField0_ & ~0x00000020);
        sampleInputRandomly_ = false;
        onChanged();
        return this;
      }

      private boolean resetAtEndUtterance_ = true;
      /**
       * <code>optional bool reset_at_end_utterance = 7 [default = true];</code>
       * @return Whether the resetAtEndUtterance field is set.
       */
      @java.lang.Override
      public boolean hasResetAtEndUtterance() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <code>optional bool reset_at_end_utterance = 7 [default = true];</code>
       * @return The resetAtEndUtterance.
       */
      @java.lang.Override
      public boolean getResetAtEndUtterance() {
        return resetAtEndUtterance_;
      }
      /**
       * <code>optional bool reset_at_end_utterance = 7 [default = true];</code>
       * @param value The resetAtEndUtterance to set.
       * @return This builder for chaining.
       */
      public Builder setResetAtEndUtterance(boolean value) {
        bitField0_ |= 0x00000040;
        resetAtEndUtterance_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool reset_at_end_utterance = 7 [default = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearResetAtEndUtterance() {
        bitField0_ = (bitField0_ & ~0x00000040);
        resetAtEndUtterance_ = true;
        onChanged();
        return this;
      }

      private float noisePercentileFloor_ = 0.25F;
      /**
       * <code>optional float noise_percentile_floor = 8 [default = 0.25];</code>
       * @return Whether the noisePercentileFloor field is set.
       */
      @java.lang.Override
      public boolean hasNoisePercentileFloor() {
        return ((bitField0_ & 0x00000080) != 0);
      }
      /**
       * <code>optional float noise_percentile_floor = 8 [default = 0.25];</code>
       * @return The noisePercentileFloor.
       */
      @java.lang.Override
      public float getNoisePercentileFloor() {
        return noisePercentileFloor_;
      }
      /**
       * <code>optional float noise_percentile_floor = 8 [default = 0.25];</code>
       * @param value The noisePercentileFloor to set.
       * @return This builder for chaining.
       */
      public Builder setNoisePercentileFloor(float value) {
        bitField0_ |= 0x00000080;
        noisePercentileFloor_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float noise_percentile_floor = 8 [default = 0.25];</code>
       * @return This builder for chaining.
       */
      public Builder clearNoisePercentileFloor() {
        bitField0_ = (bitField0_ & ~0x00000080);
        noisePercentileFloor_ = 0.25F;
        onChanged();
        return this;
      }

      private float noisePercentileBackground_ = 0.3F;
      /**
       * <code>optional float noise_percentile_background = 9 [default = 0.3];</code>
       * @return Whether the noisePercentileBackground field is set.
       */
      @java.lang.Override
      public boolean hasNoisePercentileBackground() {
        return ((bitField0_ & 0x00000100) != 0);
      }
      /**
       * <code>optional float noise_percentile_background = 9 [default = 0.3];</code>
       * @return The noisePercentileBackground.
       */
      @java.lang.Override
      public float getNoisePercentileBackground() {
        return noisePercentileBackground_;
      }
      /**
       * <code>optional float noise_percentile_background = 9 [default = 0.3];</code>
       * @param value The noisePercentileBackground to set.
       * @return This builder for chaining.
       */
      public Builder setNoisePercentileBackground(float value) {
        bitField0_ |= 0x00000100;
        noisePercentileBackground_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float noise_percentile_background = 9 [default = 0.3];</code>
       * @return This builder for chaining.
       */
      public Builder clearNoisePercentileBackground() {
        bitField0_ = (bitField0_ & ~0x00000100);
        noisePercentileBackground_ = 0.3F;
        onChanged();
        return this;
      }

      private float noisePercentileMedian_ = 0.5F;
      /**
       * <code>optional float noise_percentile_median = 10 [default = 0.5];</code>
       * @return Whether the noisePercentileMedian field is set.
       */
      @java.lang.Override
      public boolean hasNoisePercentileMedian() {
        return ((bitField0_ & 0x00000200) != 0);
      }
      /**
       * <code>optional float noise_percentile_median = 10 [default = 0.5];</code>
       * @return The noisePercentileMedian.
       */
      @java.lang.Override
      public float getNoisePercentileMedian() {
        return noisePercentileMedian_;
      }
      /**
       * <code>optional float noise_percentile_median = 10 [default = 0.5];</code>
       * @param value The noisePercentileMedian to set.
       * @return This builder for chaining.
       */
      public Builder setNoisePercentileMedian(float value) {
        bitField0_ |= 0x00000200;
        noisePercentileMedian_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float noise_percentile_median = 10 [default = 0.5];</code>
       * @return This builder for chaining.
       */
      public Builder clearNoisePercentileMedian() {
        bitField0_ = (bitField0_ & ~0x00000200);
        noisePercentileMedian_ = 0.5F;
        onChanged();
        return this;
      }

      private float noisePercentilePeak_ = 0.95F;
      /**
       * <code>optional float noise_percentile_peak = 11 [default = 0.95];</code>
       * @return Whether the noisePercentilePeak field is set.
       */
      @java.lang.Override
      public boolean hasNoisePercentilePeak() {
        return ((bitField0_ & 0x00000400) != 0);
      }
      /**
       * <code>optional float noise_percentile_peak = 11 [default = 0.95];</code>
       * @return The noisePercentilePeak.
       */
      @java.lang.Override
      public float getNoisePercentilePeak() {
        return noisePercentilePeak_;
      }
      /**
       * <code>optional float noise_percentile_peak = 11 [default = 0.95];</code>
       * @param value The noisePercentilePeak to set.
       * @return This builder for chaining.
       */
      public Builder setNoisePercentilePeak(float value) {
        bitField0_ |= 0x00000400;
        noisePercentilePeak_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float noise_percentile_peak = 11 [default = 0.95];</code>
       * @return This builder for chaining.
       */
      public Builder clearNoisePercentilePeak() {
        bitField0_ = (bitField0_ & ~0x00000400);
        noisePercentilePeak_ = 0.95F;
        onChanged();
        return this;
      }

      private boolean outputFeatureNoiseLevelPeak_ = true;
      /**
       * <code>optional bool output_feature_noise_level_peak = 12 [default = true];</code>
       * @return Whether the outputFeatureNoiseLevelPeak field is set.
       */
      @java.lang.Override
      public boolean hasOutputFeatureNoiseLevelPeak() {
        return ((bitField0_ & 0x00000800) != 0);
      }
      /**
       * <code>optional bool output_feature_noise_level_peak = 12 [default = true];</code>
       * @return The outputFeatureNoiseLevelPeak.
       */
      @java.lang.Override
      public boolean getOutputFeatureNoiseLevelPeak() {
        return outputFeatureNoiseLevelPeak_;
      }
      /**
       * <code>optional bool output_feature_noise_level_peak = 12 [default = true];</code>
       * @param value The outputFeatureNoiseLevelPeak to set.
       * @return This builder for chaining.
       */
      public Builder setOutputFeatureNoiseLevelPeak(boolean value) {
        bitField0_ |= 0x00000800;
        outputFeatureNoiseLevelPeak_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool output_feature_noise_level_peak = 12 [default = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearOutputFeatureNoiseLevelPeak() {
        bitField0_ = (bitField0_ & ~0x00000800);
        outputFeatureNoiseLevelPeak_ = true;
        onChanged();
        return this;
      }

      private boolean outputFeatureNoiseLevelMedian_ ;
      /**
       * <code>optional bool output_feature_noise_level_median = 13 [default = false];</code>
       * @return Whether the outputFeatureNoiseLevelMedian field is set.
       */
      @java.lang.Override
      public boolean hasOutputFeatureNoiseLevelMedian() {
        return ((bitField0_ & 0x00001000) != 0);
      }
      /**
       * <code>optional bool output_feature_noise_level_median = 13 [default = false];</code>
       * @return The outputFeatureNoiseLevelMedian.
       */
      @java.lang.Override
      public boolean getOutputFeatureNoiseLevelMedian() {
        return outputFeatureNoiseLevelMedian_;
      }
      /**
       * <code>optional bool output_feature_noise_level_median = 13 [default = false];</code>
       * @param value The outputFeatureNoiseLevelMedian to set.
       * @return This builder for chaining.
       */
      public Builder setOutputFeatureNoiseLevelMedian(boolean value) {
        bitField0_ |= 0x00001000;
        outputFeatureNoiseLevelMedian_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool output_feature_noise_level_median = 13 [default = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearOutputFeatureNoiseLevelMedian() {
        bitField0_ = (bitField0_ & ~0x00001000);
        outputFeatureNoiseLevelMedian_ = false;
        onChanged();
        return this;
      }

      private boolean outputFeatureNoiseLevelBackground_ ;
      /**
       * <code>optional bool output_feature_noise_level_background = 14 [default = false];</code>
       * @return Whether the outputFeatureNoiseLevelBackground field is set.
       */
      @java.lang.Override
      public boolean hasOutputFeatureNoiseLevelBackground() {
        return ((bitField0_ & 0x00002000) != 0);
      }
      /**
       * <code>optional bool output_feature_noise_level_background = 14 [default = false];</code>
       * @return The outputFeatureNoiseLevelBackground.
       */
      @java.lang.Override
      public boolean getOutputFeatureNoiseLevelBackground() {
        return outputFeatureNoiseLevelBackground_;
      }
      /**
       * <code>optional bool output_feature_noise_level_background = 14 [default = false];</code>
       * @param value The outputFeatureNoiseLevelBackground to set.
       * @return This builder for chaining.
       */
      public Builder setOutputFeatureNoiseLevelBackground(boolean value) {
        bitField0_ |= 0x00002000;
        outputFeatureNoiseLevelBackground_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool output_feature_noise_level_background = 14 [default = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearOutputFeatureNoiseLevelBackground() {
        bitField0_ = (bitField0_ & ~0x00002000);
        outputFeatureNoiseLevelBackground_ = false;
        onChanged();
        return this;
      }

      private boolean outputFeatureNoiseLevelFloor_ = true;
      /**
       * <code>optional bool output_feature_noise_level_floor = 15 [default = true];</code>
       * @return Whether the outputFeatureNoiseLevelFloor field is set.
       */
      @java.lang.Override
      public boolean hasOutputFeatureNoiseLevelFloor() {
        return ((bitField0_ & 0x00004000) != 0);
      }
      /**
       * <code>optional bool output_feature_noise_level_floor = 15 [default = true];</code>
       * @return The outputFeatureNoiseLevelFloor.
       */
      @java.lang.Override
      public boolean getOutputFeatureNoiseLevelFloor() {
        return outputFeatureNoiseLevelFloor_;
      }
      /**
       * <code>optional bool output_feature_noise_level_floor = 15 [default = true];</code>
       * @param value The outputFeatureNoiseLevelFloor to set.
       * @return This builder for chaining.
       */
      public Builder setOutputFeatureNoiseLevelFloor(boolean value) {
        bitField0_ |= 0x00004000;
        outputFeatureNoiseLevelFloor_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool output_feature_noise_level_floor = 15 [default = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearOutputFeatureNoiseLevelFloor() {
        bitField0_ = (bitField0_ & ~0x00004000);
        outputFeatureNoiseLevelFloor_ = true;
        onChanged();
        return this;
      }

      private boolean addInputToOutput_ = true;
      /**
       * <code>optional bool add_input_to_output = 16 [default = true];</code>
       * @return Whether the addInputToOutput field is set.
       */
      @java.lang.Override
      public boolean hasAddInputToOutput() {
        return ((bitField0_ & 0x00008000) != 0);
      }
      /**
       * <code>optional bool add_input_to_output = 16 [default = true];</code>
       * @return The addInputToOutput.
       */
      @java.lang.Override
      public boolean getAddInputToOutput() {
        return addInputToOutput_;
      }
      /**
       * <code>optional bool add_input_to_output = 16 [default = true];</code>
       * @param value The addInputToOutput to set.
       * @return This builder for chaining.
       */
      public Builder setAddInputToOutput(boolean value) {
        bitField0_ |= 0x00008000;
        addInputToOutput_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool add_input_to_output = 16 [default = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearAddInputToOutput() {
        bitField0_ = (bitField0_ & ~0x00008000);
        addInputToOutput_ = true;
        onChanged();
        return this;
      }

      private float sampleRateOverride_ = -1F;
      /**
       * <code>optional float sample_rate_override = 17 [default = -1];</code>
       * @return Whether the sampleRateOverride field is set.
       */
      @java.lang.Override
      public boolean hasSampleRateOverride() {
        return ((bitField0_ & 0x00010000) != 0);
      }
      /**
       * <code>optional float sample_rate_override = 17 [default = -1];</code>
       * @return The sampleRateOverride.
       */
      @java.lang.Override
      public float getSampleRateOverride() {
        return sampleRateOverride_;
      }
      /**
       * <code>optional float sample_rate_override = 17 [default = -1];</code>
       * @param value The sampleRateOverride to set.
       * @return This builder for chaining.
       */
      public Builder setSampleRateOverride(float value) {
        bitField0_ |= 0x00010000;
        sampleRateOverride_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float sample_rate_override = 17 [default = -1];</code>
       * @return This builder for chaining.
       */
      public Builder clearSampleRateOverride() {
        bitField0_ = (bitField0_ & ~0x00010000);
        sampleRateOverride_ = -1F;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:greco.SpectralNoiseParams)
    }

    // @@protoc_insertion_point(class_scope:greco.SpectralNoiseParams)
    private static final greco.SpectralNoise.SpectralNoiseParams DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new greco.SpectralNoise.SpectralNoiseParams();
    }

    public static greco.SpectralNoise.SpectralNoiseParams getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<SpectralNoiseParams>
        PARSER = new com.google.protobuf.AbstractParser<SpectralNoiseParams>() {
      @java.lang.Override
      public SpectralNoiseParams parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(
                  builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<SpectralNoiseParams> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SpectralNoiseParams> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public greco.SpectralNoise.SpectralNoiseParams getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

    public static final int ID_FIELD_NUMBER = 26169916;
    /**
     * <code>extend .greco.Params { ... }</code>
     */
    public static final
      com.google.protobuf.GeneratedMessage.GeneratedExtension<
        greco.ParamsProto.Params,
        greco.SpectralNoise.SpectralNoiseParams> id = com.google.protobuf.GeneratedMessage
            .newMessageScopedGeneratedExtension(
          greco.SpectralNoise.SpectralNoiseParams.getDefaultInstance(),
          0,
          greco.SpectralNoise.SpectralNoiseParams.class,
          greco.SpectralNoise.SpectralNoiseParams.getDefaultInstance());
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_greco_SpectralNoiseParams_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_greco_SpectralNoiseParams_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n+speech/greco3/frontend/spectral_noise." +
      "proto\022\005greco\032\037speech/greco3/core/params." +
      "proto\"\357\005\n\023SpectralNoiseParams\022\035\n\017auto_in" +
      "put_size\030\001 \001(\010:\004true\022\027\n\ninput_size\030\002 \001(\005" +
      ":\003100\022%\n\031initial_buffer_num_frames\030\003 \001(\005" +
      ":\00220\022*\n\035num_frames_start_downsampling\030\004 " +
      "\001(\005:\003200\022 \n\025sample_every_n_frames\030\005 \001(\005:" +
      "\0012\022$\n\025sample_input_randomly\030\006 \001(\010:\005false" +
      "\022$\n\026reset_at_end_utterance\030\007 \001(\010:\004true\022$" +
      "\n\026noise_percentile_floor\030\010 \001(\002:\0040.25\022(\n\033" +
      "noise_percentile_background\030\t \001(\002:\0030.3\022$" +
      "\n\027noise_percentile_median\030\n \001(\002:\0030.5\022#\n\025" +
      "noise_percentile_peak\030\013 \001(\002:\0040.95\022-\n\037out" +
      "put_feature_noise_level_peak\030\014 \001(\010:\004true" +
      "\0220\n!output_feature_noise_level_median\030\r " +
      "\001(\010:\005false\0224\n%output_feature_noise_level" +
      "_background\030\016 \001(\010:\005false\022.\n output_featu" +
      "re_noise_level_floor\030\017 \001(\010:\004true\022!\n\023add_" +
      "input_to_output\030\020 \001(\010:\004true\022 \n\024sample_ra" +
      "te_override\030\021 \001(\002:\002-128\n\002id\022\r.greco.Para" +
      "ms\030\274\244\275\014 \001(\0132\032.greco.SpectralNoiseParamsB" +
      "\010H\002\242\002\003GRC"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          greco.ParamsProto.getDescriptor(),
        });
    internal_static_greco_SpectralNoiseParams_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_greco_SpectralNoiseParams_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_greco_SpectralNoiseParams_descriptor,
        new java.lang.String[] { "AutoInputSize", "InputSize", "InitialBufferNumFrames", "NumFramesStartDownsampling", "SampleEveryNFrames", "SampleInputRandomly", "ResetAtEndUtterance", "NoisePercentileFloor", "NoisePercentileBackground", "NoisePercentileMedian", "NoisePercentilePeak", "OutputFeatureNoiseLevelPeak", "OutputFeatureNoiseLevelMedian", "OutputFeatureNoiseLevelBackground", "OutputFeatureNoiseLevelFloor", "AddInputToOutput", "SampleRateOverride", });
    greco.ParamsProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
