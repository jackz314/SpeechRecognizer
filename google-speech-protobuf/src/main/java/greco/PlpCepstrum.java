// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speech/greco3/frontend/plp_cepstrum.proto

package greco;

public final class PlpCepstrum {
  private PlpCepstrum() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
    registry.add(greco.PlpCepstrum.PlpCepstrumParams.id);
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface PlpCepstrumParamsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:greco.PlpCepstrumParams)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional int32 lp_order = 1 [default = 12];</code>
     * @return Whether the lpOrder field is set.
     */
    boolean hasLpOrder();
    /**
     * <code>optional int32 lp_order = 1 [default = 12];</code>
     * @return The lpOrder.
     */
    int getLpOrder();

    /**
     * <code>optional int32 channel_count = 2 [default = 20];</code>
     * @return Whether the channelCount field is set.
     */
    boolean hasChannelCount();
    /**
     * <code>optional int32 channel_count = 2 [default = 20];</code>
     * @return The channelCount.
     */
    int getChannelCount();

    /**
     * <code>optional int32 coeff_count = 3 [default = 13];</code>
     * @return Whether the coeffCount field is set.
     */
    boolean hasCoeffCount();
    /**
     * <code>optional int32 coeff_count = 3 [default = 13];</code>
     * @return The coeffCount.
     */
    int getCoeffCount();

    /**
     * <code>optional int32 lifter_param = 4 [default = 22];</code>
     * @return Whether the lifterParam field is set.
     */
    boolean hasLifterParam();
    /**
     * <code>optional int32 lifter_param = 4 [default = 22];</code>
     * @return The lifterParam.
     */
    int getLifterParam();

    /**
     * <code>optional float compression_factor = 5 [default = 0.33];</code>
     * @return Whether the compressionFactor field is set.
     */
    boolean hasCompressionFactor();
    /**
     * <code>optional float compression_factor = 5 [default = 0.33];</code>
     * @return The compressionFactor.
     */
    float getCompressionFactor();

    /**
     * <code>optional bool use_c0 = 6 [default = true];</code>
     * @return Whether the useC0 field is set.
     */
    boolean hasUseC0();
    /**
     * <code>optional bool use_c0 = 6 [default = true];</code>
     * @return The useC0.
     */
    boolean getUseC0();

    /**
     * <code>optional float fbank_lower_band_limit = 7 [default = 125];</code>
     * @return Whether the fbankLowerBandLimit field is set.
     */
    boolean hasFbankLowerBandLimit();
    /**
     * <code>optional float fbank_lower_band_limit = 7 [default = 125];</code>
     * @return The fbankLowerBandLimit.
     */
    float getFbankLowerBandLimit();

    /**
     * <code>optional float fbank_upper_band_limit = 8 [default = 3800];</code>
     * @return Whether the fbankUpperBandLimit field is set.
     */
    boolean hasFbankUpperBandLimit();
    /**
     * <code>optional float fbank_upper_band_limit = 8 [default = 3800];</code>
     * @return The fbankUpperBandLimit.
     */
    float getFbankUpperBandLimit();
  }
  /**
   * Protobuf type {@code greco.PlpCepstrumParams}
   */
  public static final class PlpCepstrumParams extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:greco.PlpCepstrumParams)
      PlpCepstrumParamsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use PlpCepstrumParams.newBuilder() to construct.
    private PlpCepstrumParams(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private PlpCepstrumParams() {
      lpOrder_ = 12;
      channelCount_ = 20;
      coeffCount_ = 13;
      lifterParam_ = 22;
      compressionFactor_ = 0.33F;
      useC0_ = true;
      fbankLowerBandLimit_ = 125F;
      fbankUpperBandLimit_ = 3800F;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new PlpCepstrumParams();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return greco.PlpCepstrum.internal_static_greco_PlpCepstrumParams_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return greco.PlpCepstrum.internal_static_greco_PlpCepstrumParams_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              greco.PlpCepstrum.PlpCepstrumParams.class, greco.PlpCepstrum.PlpCepstrumParams.Builder.class);
    }

    private int bitField0_;
    public static final int LP_ORDER_FIELD_NUMBER = 1;
    private int lpOrder_;
    /**
     * <code>optional int32 lp_order = 1 [default = 12];</code>
     * @return Whether the lpOrder field is set.
     */
    @java.lang.Override
    public boolean hasLpOrder() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional int32 lp_order = 1 [default = 12];</code>
     * @return The lpOrder.
     */
    @java.lang.Override
    public int getLpOrder() {
      return lpOrder_;
    }

    public static final int CHANNEL_COUNT_FIELD_NUMBER = 2;
    private int channelCount_;
    /**
     * <code>optional int32 channel_count = 2 [default = 20];</code>
     * @return Whether the channelCount field is set.
     */
    @java.lang.Override
    public boolean hasChannelCount() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>optional int32 channel_count = 2 [default = 20];</code>
     * @return The channelCount.
     */
    @java.lang.Override
    public int getChannelCount() {
      return channelCount_;
    }

    public static final int COEFF_COUNT_FIELD_NUMBER = 3;
    private int coeffCount_;
    /**
     * <code>optional int32 coeff_count = 3 [default = 13];</code>
     * @return Whether the coeffCount field is set.
     */
    @java.lang.Override
    public boolean hasCoeffCount() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>optional int32 coeff_count = 3 [default = 13];</code>
     * @return The coeffCount.
     */
    @java.lang.Override
    public int getCoeffCount() {
      return coeffCount_;
    }

    public static final int LIFTER_PARAM_FIELD_NUMBER = 4;
    private int lifterParam_;
    /**
     * <code>optional int32 lifter_param = 4 [default = 22];</code>
     * @return Whether the lifterParam field is set.
     */
    @java.lang.Override
    public boolean hasLifterParam() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>optional int32 lifter_param = 4 [default = 22];</code>
     * @return The lifterParam.
     */
    @java.lang.Override
    public int getLifterParam() {
      return lifterParam_;
    }

    public static final int COMPRESSION_FACTOR_FIELD_NUMBER = 5;
    private float compressionFactor_;
    /**
     * <code>optional float compression_factor = 5 [default = 0.33];</code>
     * @return Whether the compressionFactor field is set.
     */
    @java.lang.Override
    public boolean hasCompressionFactor() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <code>optional float compression_factor = 5 [default = 0.33];</code>
     * @return The compressionFactor.
     */
    @java.lang.Override
    public float getCompressionFactor() {
      return compressionFactor_;
    }

    public static final int USE_C0_FIELD_NUMBER = 6;
    private boolean useC0_;
    /**
     * <code>optional bool use_c0 = 6 [default = true];</code>
     * @return Whether the useC0 field is set.
     */
    @java.lang.Override
    public boolean hasUseC0() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <code>optional bool use_c0 = 6 [default = true];</code>
     * @return The useC0.
     */
    @java.lang.Override
    public boolean getUseC0() {
      return useC0_;
    }

    public static final int FBANK_LOWER_BAND_LIMIT_FIELD_NUMBER = 7;
    private float fbankLowerBandLimit_;
    /**
     * <code>optional float fbank_lower_band_limit = 7 [default = 125];</code>
     * @return Whether the fbankLowerBandLimit field is set.
     */
    @java.lang.Override
    public boolean hasFbankLowerBandLimit() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <code>optional float fbank_lower_band_limit = 7 [default = 125];</code>
     * @return The fbankLowerBandLimit.
     */
    @java.lang.Override
    public float getFbankLowerBandLimit() {
      return fbankLowerBandLimit_;
    }

    public static final int FBANK_UPPER_BAND_LIMIT_FIELD_NUMBER = 8;
    private float fbankUpperBandLimit_;
    /**
     * <code>optional float fbank_upper_band_limit = 8 [default = 3800];</code>
     * @return Whether the fbankUpperBandLimit field is set.
     */
    @java.lang.Override
    public boolean hasFbankUpperBandLimit() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <code>optional float fbank_upper_band_limit = 8 [default = 3800];</code>
     * @return The fbankUpperBandLimit.
     */
    @java.lang.Override
    public float getFbankUpperBandLimit() {
      return fbankUpperBandLimit_;
    }

    public static greco.PlpCepstrum.PlpCepstrumParams parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static greco.PlpCepstrum.PlpCepstrumParams parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static greco.PlpCepstrum.PlpCepstrumParams parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static greco.PlpCepstrum.PlpCepstrumParams parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static greco.PlpCepstrum.PlpCepstrumParams parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static greco.PlpCepstrum.PlpCepstrumParams parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static greco.PlpCepstrum.PlpCepstrumParams parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static greco.PlpCepstrum.PlpCepstrumParams parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static greco.PlpCepstrum.PlpCepstrumParams parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static greco.PlpCepstrum.PlpCepstrumParams parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static greco.PlpCepstrum.PlpCepstrumParams parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static greco.PlpCepstrum.PlpCepstrumParams parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(greco.PlpCepstrum.PlpCepstrumParams prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code greco.PlpCepstrumParams}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:greco.PlpCepstrumParams)
        greco.PlpCepstrum.PlpCepstrumParamsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return greco.PlpCepstrum.internal_static_greco_PlpCepstrumParams_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return greco.PlpCepstrum.internal_static_greco_PlpCepstrumParams_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                greco.PlpCepstrum.PlpCepstrumParams.class, greco.PlpCepstrum.PlpCepstrumParams.Builder.class);
      }

      // Construct using greco.PlpCepstrum.PlpCepstrumParams.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        lpOrder_ = 12;
        bitField0_ = (bitField0_ & ~0x00000001);
        channelCount_ = 20;
        bitField0_ = (bitField0_ & ~0x00000002);
        coeffCount_ = 13;
        bitField0_ = (bitField0_ & ~0x00000004);
        lifterParam_ = 22;
        bitField0_ = (bitField0_ & ~0x00000008);
        compressionFactor_ = 0.33F;
        bitField0_ = (bitField0_ & ~0x00000010);
        useC0_ = true;
        bitField0_ = (bitField0_ & ~0x00000020);
        fbankLowerBandLimit_ = 125F;
        bitField0_ = (bitField0_ & ~0x00000040);
        fbankUpperBandLimit_ = 3800F;
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return greco.PlpCepstrum.internal_static_greco_PlpCepstrumParams_descriptor;
      }

      @java.lang.Override
      public greco.PlpCepstrum.PlpCepstrumParams getDefaultInstanceForType() {
        return greco.PlpCepstrum.PlpCepstrumParams.getDefaultInstance();
      }

      @java.lang.Override
      public greco.PlpCepstrum.PlpCepstrumParams build() {
        greco.PlpCepstrum.PlpCepstrumParams result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public greco.PlpCepstrum.PlpCepstrumParams buildPartial() {
        greco.PlpCepstrum.PlpCepstrumParams result = new greco.PlpCepstrum.PlpCepstrumParams(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          to_bitField0_ |= 0x00000001;
        }
        result.lpOrder_ = lpOrder_;
        if (((from_bitField0_ & 0x00000002) != 0)) {
          to_bitField0_ |= 0x00000002;
        }
        result.channelCount_ = channelCount_;
        if (((from_bitField0_ & 0x00000004) != 0)) {
          to_bitField0_ |= 0x00000004;
        }
        result.coeffCount_ = coeffCount_;
        if (((from_bitField0_ & 0x00000008) != 0)) {
          to_bitField0_ |= 0x00000008;
        }
        result.lifterParam_ = lifterParam_;
        if (((from_bitField0_ & 0x00000010) != 0)) {
          to_bitField0_ |= 0x00000010;
        }
        result.compressionFactor_ = compressionFactor_;
        if (((from_bitField0_ & 0x00000020) != 0)) {
          to_bitField0_ |= 0x00000020;
        }
        result.useC0_ = useC0_;
        if (((from_bitField0_ & 0x00000040) != 0)) {
          to_bitField0_ |= 0x00000040;
        }
        result.fbankLowerBandLimit_ = fbankLowerBandLimit_;
        if (((from_bitField0_ & 0x00000080) != 0)) {
          to_bitField0_ |= 0x00000080;
        }
        result.fbankUpperBandLimit_ = fbankUpperBandLimit_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      private int bitField0_;

      private int lpOrder_ = 12;
      /**
       * <code>optional int32 lp_order = 1 [default = 12];</code>
       * @return Whether the lpOrder field is set.
       */
      @java.lang.Override
      public boolean hasLpOrder() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional int32 lp_order = 1 [default = 12];</code>
       * @return The lpOrder.
       */
      @java.lang.Override
      public int getLpOrder() {
        return lpOrder_;
      }
      /**
       * <code>optional int32 lp_order = 1 [default = 12];</code>
       * @param value The lpOrder to set.
       * @return This builder for chaining.
       */
      public Builder setLpOrder(int value) {
        bitField0_ |= 0x00000001;
        lpOrder_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 lp_order = 1 [default = 12];</code>
       * @return This builder for chaining.
       */
      public Builder clearLpOrder() {
        bitField0_ = (bitField0_ & ~0x00000001);
        lpOrder_ = 12;
        onChanged();
        return this;
      }

      private int channelCount_ = 20;
      /**
       * <code>optional int32 channel_count = 2 [default = 20];</code>
       * @return Whether the channelCount field is set.
       */
      @java.lang.Override
      public boolean hasChannelCount() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional int32 channel_count = 2 [default = 20];</code>
       * @return The channelCount.
       */
      @java.lang.Override
      public int getChannelCount() {
        return channelCount_;
      }
      /**
       * <code>optional int32 channel_count = 2 [default = 20];</code>
       * @param value The channelCount to set.
       * @return This builder for chaining.
       */
      public Builder setChannelCount(int value) {
        bitField0_ |= 0x00000002;
        channelCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 channel_count = 2 [default = 20];</code>
       * @return This builder for chaining.
       */
      public Builder clearChannelCount() {
        bitField0_ = (bitField0_ & ~0x00000002);
        channelCount_ = 20;
        onChanged();
        return this;
      }

      private int coeffCount_ = 13;
      /**
       * <code>optional int32 coeff_count = 3 [default = 13];</code>
       * @return Whether the coeffCount field is set.
       */
      @java.lang.Override
      public boolean hasCoeffCount() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>optional int32 coeff_count = 3 [default = 13];</code>
       * @return The coeffCount.
       */
      @java.lang.Override
      public int getCoeffCount() {
        return coeffCount_;
      }
      /**
       * <code>optional int32 coeff_count = 3 [default = 13];</code>
       * @param value The coeffCount to set.
       * @return This builder for chaining.
       */
      public Builder setCoeffCount(int value) {
        bitField0_ |= 0x00000004;
        coeffCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 coeff_count = 3 [default = 13];</code>
       * @return This builder for chaining.
       */
      public Builder clearCoeffCount() {
        bitField0_ = (bitField0_ & ~0x00000004);
        coeffCount_ = 13;
        onChanged();
        return this;
      }

      private int lifterParam_ = 22;
      /**
       * <code>optional int32 lifter_param = 4 [default = 22];</code>
       * @return Whether the lifterParam field is set.
       */
      @java.lang.Override
      public boolean hasLifterParam() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>optional int32 lifter_param = 4 [default = 22];</code>
       * @return The lifterParam.
       */
      @java.lang.Override
      public int getLifterParam() {
        return lifterParam_;
      }
      /**
       * <code>optional int32 lifter_param = 4 [default = 22];</code>
       * @param value The lifterParam to set.
       * @return This builder for chaining.
       */
      public Builder setLifterParam(int value) {
        bitField0_ |= 0x00000008;
        lifterParam_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 lifter_param = 4 [default = 22];</code>
       * @return This builder for chaining.
       */
      public Builder clearLifterParam() {
        bitField0_ = (bitField0_ & ~0x00000008);
        lifterParam_ = 22;
        onChanged();
        return this;
      }

      private float compressionFactor_ = 0.33F;
      /**
       * <code>optional float compression_factor = 5 [default = 0.33];</code>
       * @return Whether the compressionFactor field is set.
       */
      @java.lang.Override
      public boolean hasCompressionFactor() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <code>optional float compression_factor = 5 [default = 0.33];</code>
       * @return The compressionFactor.
       */
      @java.lang.Override
      public float getCompressionFactor() {
        return compressionFactor_;
      }
      /**
       * <code>optional float compression_factor = 5 [default = 0.33];</code>
       * @param value The compressionFactor to set.
       * @return This builder for chaining.
       */
      public Builder setCompressionFactor(float value) {
        bitField0_ |= 0x00000010;
        compressionFactor_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float compression_factor = 5 [default = 0.33];</code>
       * @return This builder for chaining.
       */
      public Builder clearCompressionFactor() {
        bitField0_ = (bitField0_ & ~0x00000010);
        compressionFactor_ = 0.33F;
        onChanged();
        return this;
      }

      private boolean useC0_ = true;
      /**
       * <code>optional bool use_c0 = 6 [default = true];</code>
       * @return Whether the useC0 field is set.
       */
      @java.lang.Override
      public boolean hasUseC0() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <code>optional bool use_c0 = 6 [default = true];</code>
       * @return The useC0.
       */
      @java.lang.Override
      public boolean getUseC0() {
        return useC0_;
      }
      /**
       * <code>optional bool use_c0 = 6 [default = true];</code>
       * @param value The useC0 to set.
       * @return This builder for chaining.
       */
      public Builder setUseC0(boolean value) {
        bitField0_ |= 0x00000020;
        useC0_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool use_c0 = 6 [default = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearUseC0() {
        bitField0_ = (bitField0_ & ~0x00000020);
        useC0_ = true;
        onChanged();
        return this;
      }

      private float fbankLowerBandLimit_ = 125F;
      /**
       * <code>optional float fbank_lower_band_limit = 7 [default = 125];</code>
       * @return Whether the fbankLowerBandLimit field is set.
       */
      @java.lang.Override
      public boolean hasFbankLowerBandLimit() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <code>optional float fbank_lower_band_limit = 7 [default = 125];</code>
       * @return The fbankLowerBandLimit.
       */
      @java.lang.Override
      public float getFbankLowerBandLimit() {
        return fbankLowerBandLimit_;
      }
      /**
       * <code>optional float fbank_lower_band_limit = 7 [default = 125];</code>
       * @param value The fbankLowerBandLimit to set.
       * @return This builder for chaining.
       */
      public Builder setFbankLowerBandLimit(float value) {
        bitField0_ |= 0x00000040;
        fbankLowerBandLimit_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float fbank_lower_band_limit = 7 [default = 125];</code>
       * @return This builder for chaining.
       */
      public Builder clearFbankLowerBandLimit() {
        bitField0_ = (bitField0_ & ~0x00000040);
        fbankLowerBandLimit_ = 125F;
        onChanged();
        return this;
      }

      private float fbankUpperBandLimit_ = 3800F;
      /**
       * <code>optional float fbank_upper_band_limit = 8 [default = 3800];</code>
       * @return Whether the fbankUpperBandLimit field is set.
       */
      @java.lang.Override
      public boolean hasFbankUpperBandLimit() {
        return ((bitField0_ & 0x00000080) != 0);
      }
      /**
       * <code>optional float fbank_upper_band_limit = 8 [default = 3800];</code>
       * @return The fbankUpperBandLimit.
       */
      @java.lang.Override
      public float getFbankUpperBandLimit() {
        return fbankUpperBandLimit_;
      }
      /**
       * <code>optional float fbank_upper_band_limit = 8 [default = 3800];</code>
       * @param value The fbankUpperBandLimit to set.
       * @return This builder for chaining.
       */
      public Builder setFbankUpperBandLimit(float value) {
        bitField0_ |= 0x00000080;
        fbankUpperBandLimit_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float fbank_upper_band_limit = 8 [default = 3800];</code>
       * @return This builder for chaining.
       */
      public Builder clearFbankUpperBandLimit() {
        bitField0_ = (bitField0_ & ~0x00000080);
        fbankUpperBandLimit_ = 3800F;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:greco.PlpCepstrumParams)
    }

    // @@protoc_insertion_point(class_scope:greco.PlpCepstrumParams)
    private static final greco.PlpCepstrum.PlpCepstrumParams DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new greco.PlpCepstrum.PlpCepstrumParams();
    }

    public static greco.PlpCepstrum.PlpCepstrumParams getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<PlpCepstrumParams>
        PARSER = new com.google.protobuf.AbstractParser<PlpCepstrumParams>() {
      @java.lang.Override
      public PlpCepstrumParams parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(
                  builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<PlpCepstrumParams> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<PlpCepstrumParams> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public greco.PlpCepstrum.PlpCepstrumParams getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

    public static final int ID_FIELD_NUMBER = 19108347;
    /**
     * <code>extend .greco.Params { ... }</code>
     */
    public static final
      com.google.protobuf.GeneratedMessage.GeneratedExtension<
        greco.ParamsProto.Params,
        greco.PlpCepstrum.PlpCepstrumParams> id = com.google.protobuf.GeneratedMessage
            .newMessageScopedGeneratedExtension(
          greco.PlpCepstrum.PlpCepstrumParams.getDefaultInstance(),
          0,
          greco.PlpCepstrum.PlpCepstrumParams.class,
          greco.PlpCepstrum.PlpCepstrumParams.getDefaultInstance());
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_greco_PlpCepstrumParams_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_greco_PlpCepstrumParams_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n)speech/greco3/frontend/plp_cepstrum.pr" +
      "oto\022\005greco\032\037speech/greco3/core/params.pr" +
      "oto\"\262\002\n\021PlpCepstrumParams\022\024\n\010lp_order\030\001 " +
      "\001(\005:\00212\022\031\n\rchannel_count\030\002 \001(\005:\00220\022\027\n\013co" +
      "eff_count\030\003 \001(\005:\00213\022\030\n\014lifter_param\030\004 \001(" +
      "\005:\00222\022 \n\022compression_factor\030\005 \001(\002:\0040.33\022" +
      "\024\n\006use_c0\030\006 \001(\010:\004true\022#\n\026fbank_lower_ban" +
      "d_limit\030\007 \001(\002:\003125\022$\n\026fbank_upper_band_l" +
      "imit\030\010 \001(\002:\004380026\n\002id\022\r.greco.Params\030\373\243" +
      "\216\t \001(\0132\030.greco.PlpCepstrumParamsB\010H\002\242\002\003G" +
      "RC"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          greco.ParamsProto.getDescriptor(),
        });
    internal_static_greco_PlpCepstrumParams_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_greco_PlpCepstrumParams_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_greco_PlpCepstrumParams_descriptor,
        new java.lang.String[] { "LpOrder", "ChannelCount", "CoeffCount", "LifterParam", "CompressionFactor", "UseC0", "FbankLowerBandLimit", "FbankUpperBandLimit", });
    greco.ParamsProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
